TOOLBOX à DL :
VSCODE
POWERSHELL
PYTHON
PIP
SOURCERY (vs Code)
SQLITE
POSTGRESQL + psycopg2
DJANGO
DJNANGO - PHONE FIELD : pip install django-phone-field
BEAUTIFULSOUP: pip install bs4 requests - scraper les sites
web3
Flake8
GETH
SELENIUM
FIREFOX OU CHROME DRIVER SELENIUM
BLACK VS CODE
MYPY (caster - typage fort)
feedparser (api RSS)
TABNINE VS CODE
GITHUB VS CODE
GIT
GitKraken - visualisation arborescence
VPN
MATPLOTLIB
ANTIVIRUS
VS CODE
UBUNTU
FILEZILLA (FTP)
Chart.js
TWEEPY - API TWITTER

##################### ressources 

Toutes les documentations de langages : https://devdocs.io/

Apprendre le css (flexbox & autre) : flexboxfroggy.com  // reviser absolute/relative, et les grid

Ensemble de logos pour insertions dans HTML :  ionicons.com (sous download cliquer sur CDN, et copier le lien css pour l'intégrer dans le script html via 
balise comme <link rel=stylesheet href="cheminàcopier"> dans head. puis pour placer icone : créer dans body <i class="nomdeliconesurlesite"> </i>



---------------------------------------------------- GPT 3

Tuto installation avec check de la vRAM : https://www.youtube.com/watch?v=d_ypajqmwcU

----------------------------------------------------------------CHART JS

Django graphique javascript

https://www.youtube.com/watch?v=WiPDK11ljb0



-------------------------------------------- BEAUTIFUL SOUP

--------------------------
récupérer toutes les balises X contenant des str Y

soup.find_all("a", string="data"))

pareil avec regex :

soup.find_all("a", string=re.compile("data")))
-------------------------
récupérer tous les liens d'une page ;

        for link in soup.find_all("a"):
            href = link.get("href")
--------------------------------
récupérer un ensemble de balises X

for item in soup.find_all(["h1", "h2", "h3")]:
	print(item.text.strip())

pareil avec les "a" mais dans le body ou autre :

for link in soup.select("body a"):
	print(link)


--------------------------------
import os
import csv
import requests
from bs4 import BeautifulSoup

1°) Récupérer la page cible :

requete = requests.get("https://zestedesavoir.com/tutoriels/?category=autres-informatique")
page = requete.content
soup = BeautifulSoup(page)

2°) Récupérer un élément : 

h1 = soup.find("h1", {"class": "ico-after ico-tutorials"})
print(h1.string)

3°) nettoyer la réponse

titre = h1.string.strip()


EN CAS DE CAPTCHA DU SITE QUI PROTEGE LA DATA :

import requests
from bs4 import BeautifulSoup
from urllib.parse import urlparse
 
 
def GET_UA():
    uastrings = ["Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36",\
                "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36",\
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10) AppleWebKit/600.1.25 (KHTML, like Gecko) Version/8.0 Safari/600.1.25",\
                "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0",\
                "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36",\
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36",\
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/600.1.17 (KHTML, like Gecko) Version/7.1 Safari/537.85.10",\
                "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko",\
                "Mozilla/5.0 (Windows NT 6.3; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0",\
                "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.104 Safari/537.36"\
                ]
 
    return random.choice(uastrings)
 
 
def parse_url(url):
 
    headers = {'User-Agent': GET_UA()}
    content = None
 
    try:
        response = requests.get(url, headers=headers)
        ct = response.headers['Content-Type'].lower().strip()
 
        if 'text/html' in ct:
            content = response.content
            soup = BeautifulSoup(content, "lxml" #on peut changer lxml par "html.parser" si besoin)
	    data_cible = soup.find("chercher l'element" ex : find("h1", {"class": "nom_classe"})
        else:
            content = response.content
            soup = None
 
    except Exception as e:
        print(“Error:, str(e))
 
    return content, soup, ct
 

------------------------------------------- DJANGO

Etapes : 

0°) Créer env virtuel
1°) Installer Django
2°) Créer projet / créer app / créer dossiers (urls, templates, style/css...) 
3°) Créer DATABASE POSTGRESQL
4°) Configurer settings py (DB, nom app dans urls.py)
5°) Migration 
6°) créer les models (ne pas oublier le __str__ en retour fonction)
7°) Migration N°2 (création des tables models)
8°) Créer superuser admin 
9°) Intégrer les élements dans admin pour pilotage


#################### A NE PAS OUBLIER #######################################################################

exemple de queries F et Q et de classes models avec many 2 many .. : https://medium.com/@Usmanajibola/advanced-django-queries-you-should-know-47bbebdf121b

documentation officielle django relative : https://docs.djangoproject.com/en/3.2/ref/models/querysets/

tuto REST API DJANGO CRUD : https://medium.com/@saikatmajumder444/build-a-restful-api-and-a-crud-app-with-django-django-rest-framework-method-1-7a063fa187a6

#######################################################################

À chaque fois qu’un formulaire modifie des données sur le serveur, vous devez utiliser method="post"
Cela ne concerne pas uniquement Django ; c’est une bonne pratique à adopter en tant que développeur Web.

Tous les formulaires POST destinés à des URL internes doivent utiliser la balise de gabarit {% csrf_token %}.

---1-----------
Dans l'html, bien utiliser l'expression générique url pour relier à la bonne name vue
<li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li>

SI BCP APPLICATIONS : Nommer les urls de l'application sous une variable (ici app_name polls)

Dans SETTINGS.PY

from . import views

app_name = 'polls'
urlpatterns = [
    path('', views.index, name='index'),

Dans le HTML
<li><a href="{% url 'polls:detail' question.id %}">{{ question.question_text }}</a></li>

---------------


---2-------------
ajout d'un bouton d'action via variable booleenne: https://www.youtube.com/watch?v=T5zyhIafa68

0°) dans le fichier models créer un field booleen dans la classe visée
annule = models.BooleanField(default=False, name="sejour_annule")

1°) créer fonction dans la classe visée à la suite du field
def annulation(self):
 	self.annule = True

2°) dans le fichier view appeler la fonction annulation de la classe de models, fonction view qui renvoie sur la page en cours 

@login_required # decorateur de securité important à ne pas oublier
def annule_sejour(request, sejour_id)
	sejour = Sejour.objects.get(id=sejour_id)
	sejour.annulation()
	sejour.save() # bien penser à sauvegarder
	return redirect("detail_sejour", pk=sejour_id)

3°) comme toutes vue, renvoyer vers fonction view dans le fichier urls

rajouter le path dans le fichier urls (importer les vues aussi)
path("sejour/annule/<int:sejour_id>/", sejour.annule_sejour, name="annule_sejour")

4°) ajouter le bouton d'action dans le fichier html

<span>
<a href)= "{% url 'annule_sejour' sejour.id %}" class="bouton_action"> annuler le séjour </span>

{% if sejour.annule %}
	Le séjour est annulé
{% endif %}


---------------

--- 3 -------------

Formater l'affichage des variable django {{ variable }} suivant leur contenu ;

https://docs.djangoproject.com/fr/4.0/ref/templates/builtins/#ref-templates-builtins-filters

---------------

--- 4 -------------

Configuration des réglages avant déploiement d'une application Django

https://www.youtube.com/watch?v=mAeK4Ia4fk8

#############################################################################################################


Deployer site Django, 4 possibilités ;
Installer directement sur un serveur (méthode "ancienne")
Utiliser Docker pour déployer directement sur un serveur linux : idéal pour MVP, donc ps de scaling, et il tournera sur un seul serveur
Utiliser un Service d'Orchstration via un Gestionnaire Docker : meilleure option si l'on veut scaling, multi serveur, assisté d'un gestionnaire logiciel,  mais peut-être couteux et complexe
Utiliser une technologie sans serveur (cloud app ex google engine) : meilleure option si l'on veut faciliter le déploiement et les reglages,  scaling, multi serveur, et gratuit, mais dépendance au service, une migration ne sera pas "one-click"

#############################################################################################################

-------------création d'un utilisateur administrateur 

python manage.py createsuperuser


renseigner :
nom administrateur
email
mdp

accéder au panneau d'administration

-------------création et intégration des models :

description = models.TextField(blank=True)
champ_texte_a_remplir = models.CharField(max_length=XX)      #le max_length est obligatoire
champs_date_a_remplir = models.DateTimeField("Date de publication")
models.FloatField(default=0.0)
models.IntegerField(default=0)
image_du_model = models.ImageField(upload_to="dossier_cible", blank=True, null=True)  # BIEN SPECIFIER entre ()

ex Phone field :

from django.db import models
from phone_field import PhoneField


class MyModel(models.Model):
    name = models.CharField(max_length=128)
    phone = PhoneField(blank=True, help_text='Contact phone number')

ex :

from django.db import models


class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')


class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)


relier une classe d'objet à une autre via ForeignKey (un choix est relié à une seule question)

1°) Une fois le models alimenté, ajouter dans la liste INSTALLED APPS dans SETTINGS.PY comme suivant ;

INSTALLED_APPS = [
    'mon_app.apps.MonAppConfig',
    'django.contrib.admin']

(Récupérer "MonAppConfig" dans le fichier apps)

2°) Maintenant il faut que django inclut l'application :

python manage.py makemigrations mon_app

3°) Pour accéder au script SQL lié à la migration pour modifier si besoin est :

python manage.py sqlmigrate app_test 0001

4°) vérifier la fiabilité de la migration avant de la réaliser :

python manage.py check

5°) Réaliser la migration (création des tables)

python manage.py migrate

------------------- INTEGRER LE PYTHON VIEW AU HTML 

Ex documentation python : 

DANS LE VIEW PY :

from django.shortcuts import render

from .models import Question

def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    context = {'latest_question_list': latest_question_list}
    return render(request, 'polls/index.html', context)

DANS LE HTML relié au PYTHON

{% if latest_question_list %}
    <ul>
    {% for question in latest_question_list %}
        <li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>
    {% endfor %}
    </ul>
{% else %}
    <p>No polls are available.</p>
{% endif %}


------------------- SHELL DJANGO

Sert à utiliser les API

0°) Lancer le shell : python manage.py shell

explorer l'API de BDD :

>>> from app_test.models import Choix, Question     # importer les classes Choix et Question que l'on veut tester

>>> Question.objects.all()       # requeter la classe pour avoir les enregistrements


créer une nouvelle ligne dans BDD de la classe Question :

>>> q = Question(question_text="blablabla?", pub_date=timezone.now()  #timezone.now est comme un timestamp

Enregistrer la nouvelle ligne :

>>> q.save()

Récupérer l'ID de l'enregistrement :
>>> q.id()

Récupérer l'objet via son id :
>>> Question.objects.filter(id=1)       #on peut remplacer id par pk (primary key)

Récupérer l'objet via un filtre de contenu :
>>> Question.objects.filter(question_text__startswith="WAZZZZZA")

Accéder à la valeur du champ visé :

>>> q.question_text
>>> q.pub_date

Changer la valeur après enregistrement 
>>> q.question_text = "nouvelle question?"
>>> q.save()

Supprimer un élement
>>> q.delete()

######  Intéragir avec une class  - ATTENTION A METTRE LA CLASSE EN MINUSCULE ######  utiliser _set
afficher le contenu de la class visée

utilisateur = InformationsUser.objects.get(pk=1)
utilisateur.sousclasse_set.all()

Insérer un objet dans la classe :
utilisateur.sousclasse_set.create(variable="texte variable", variable2=..)

Interroger la classe de lobjet de sous classe :
utilisateur.classesuperieure

Compter le nb d'objet de la sous classe :
utilisateur.sousclass_set.count()

supprimer un objet de la sous classe, via filtre :
objet_vise = utilisateur.sousclass_set.filter(variable_texte__startwith='Tex')
objet_vise.delete()




---------------------- STEP 1

dans fichier apps.py

from django.apps import AppConfig

class Nom_AppConfig(AppConfig):
	default_auto_field = 'django.db.models.BigAutoField'
	name = 'app_test'

puis dans settings.py

dans INSTALLED_APPS = ["app_test.apps.Nom_AppConfig",]

-------------------- STEP 2

ajout d'une application dans l'arborescence des urls, dans urls.py (main)

from django.contrib import admin
from django.urls import path, include

urlpatterns = [path("admin/", admin.site.urls), path("app_test/", include("app_test.urls")),]

------------------- PAGE 404 DJANGO

A) Soit utiliser une fonction try except,ex ;

def detail(request, question_id):
    try:
        question = Question.objects.get(pk=question_id)
    except Question.DoesNotExist:
        raise Http404("Question does not exist")
    return render(request, 'polls/detail.html', {'question': question})

B) Soit utiliser un get_object_or_404

from .models import Question
# ...
def detail(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, 'polls/detail.html', {'question': question})

C) Soit les deux ;

Il est très courant d’utiliser get() et de lever une exception Http404 si l’objet n’existe pas. Django fournit un raccourci. Voici la vue detail() réécrite 


--------------- lier un element xx à l'admin pour pilotage administrateur

dans fichier admin.py ;

from django.contrib import admin 

from .models import xx

admin.site.register(xx)

---------------- installation / lancement / configuration


1°)  python -m pip install Django

2°) dans terminal via CD se placer dans le dossier du projet, puis : django-admin startproject nom_projet

Cela va créer un dossier projet django

3°) rentrer dans le repertoire de travail via cd, puis lancer le manager ;

python manage.py runserver

4°) dans le navigateur internet, taper ; localhost:8000 (pour lancer le serveur)

Désormais le framework est installé, et l'environnement de travail est prêt

5°) Se placer dans le dossier ou se trouve le fichier manage, créer le dossier de l'application : python manage.py startapp nom_app

6°) lancer le serveur via run serveur + navigateur avec localhost

7°) Dans le dossier de l'app (a côté de admin, test...) créer fichier urls.py pour créer architecture de l'app
	dans ce fichier, écrire
	from django.urls import path
	from . import views

urlpatterns = [
	path('', views.index, name='index')
]

8°) aller dans le fichier views.py du dossier, écrire :
	from django.shortcuts import render
	from django.http import HttpResponse

def index(request):
	return HttpResponse("Bienvenue sur Mangalib !")

	
9°) Aller dans le fichier urls.py du dossier parent, et en bas, dans urlpatterns existant :

	from django.urls import path, include

urlpatterns = [
	path('admin/', admin.site.urls),
	path('manga/', include('mangalib.urls')
]

10°) dans le fichier settings du dossier parent, ajouter 'mangalib' à la suite de la liste des installed_apps (après django.contrib.staticfiles)


-------------- Les VIEWS

##### Insérer du contenu de models dans les views, deux façons #####  ;

soit directement dans le return :

def detail(request, informationsuser_id):
	return HttpResponse("Le joueur numéro %s." % informationsuser_id)

ici informationsuser_id est la clé primaire des objet créé par la classe InformationsUser
On peut appeler n'importe quelle variable sur le modle classenminuscule_variable
On utilise %s pour définir la place de l'insertion, et % variable pour indiquer la variable

soit via une variable intermédiaire

def detail(request, informationsuser_id):
	response =  "Le joueur numéro %s."
	return HttpResponse(response % informationsuser_id)

##### changer les urls dynamiquement suivant les VIEWS ##### ;

dans fichier mon_app/urls

urlpatterns = [

	path('<int:informationsuser_id>/', view.detail, name='detail'),]

permet d'avoir une url du type landingpage/x/ ou x est l'id de l'objet

On peut aussi aller plus loin et aller dans une sous classe spécifique du style :

urlpatterns = [

	path('<int:informationsuser_id>/detail/', view.detail, name='detail'),]

On peut remplacer la clé <int:informationsuser_id> par str ou autre

--------- ASTUCES ---------

Boucle % FOR % DJANGO

Au lieu de 
{% if variable_existante %}
{% for objet in variable _existante %}
	blabla
{% endif%}
{% else %} 
	blabla
{% endfor %}

Au lieu de 
{% for objet in variable _existante %}
	blabla
{% empty %}
	blabla
{% endfor %}

----------------------

Mettre au singulier ou au pluriel un nom de variable suivant le nb d'élément dans la liste :

utiliser pluralize, voir : https://www.youtube.com/watch?v=PXr6Qk6vMvk

----------------------

Alterner les traitements CSS d'une liste par une boucle FOR, grâce à CYCLE :

fichier css :

.nom_classe_css{
	color: green;
}

.nom_class_css_2{
	color: blue;
}


fichier html :
{% for utilisateur in utilisateurs %}
	<h1 class=row {% cycle 'nom_classe_css' 'nom_class_css_2' %}> {{ nom.utilisateur}} </h1>
{% endfor %}


---------------------------

Ajouter du texte fictif pour alimenter site :

{% lorem %}

ajouter plusieurs paragraphes

<p> {% lorem 3 p %} >/p>



--------------------------------

Ajouter la date actuelle :

{{ today }} (récupération du contexte depuis vue qui renvoei date.datetieme

équivalent sans besoin de contexte de vue :

{% now 'l d F Y' %}

------------- TEMPLATES

Dans le dossier mon_app, créer un dossier templates pour les gabarits 
Puis dans ce nouveau dossier créer un dossier mon_app pour bien cloisonner les utilisations 
Puis créer le fichier html avec le nom de la fonction view visée

soit une arborescence : mon_app/templates/mon_app/index.html

---- OPTIONS du fichier settings :

langue : 'fr-FR'

DATABASE pour connexion postgresql (d'abord créer database avant!):

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mydatabase',
        'USER': 'mydatabaseuser',
        'PASSWORD': 'mypassword',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

Une fois la database créee et les id renseignés dans settings.py, taper python manage.py migrate



---------------------------------------------- FILEZILLA FTP

Voir pour transfert de site ;

https://openclassrooms.com/fr/courses/1603881-apprenez-a-creer-votre-site-web-avec-html5-et-css3/1607901-envoyez-votre-site-sur-le-web

Pour le moment, votre site web n'est visible que par vous, sur votre ordinateur. Il faut l'envoyer sur le Web pour qu'il soit visible par tout le monde.
Vous avez besoin de deux éléments :
un nom de domaine : c'est l'adresse de votre site web. Vous pouvez réserver une adresse en .com  , .fr  , .net  … Par exemple : openclassrooms.com  .
un hébergeur : c'est lui qui va stocker votre site web sur une machine appelée « serveur ». Son rôle sera d'envoyer votre site à vos visiteurs à toute heure du jour et de la nuit.
Pour transmettre les fichiers de votre site au serveur de votre hébergeur, il faut utiliser un client FTP comme FileZilla.
Pour vous connecter au serveur, vous avez besoin de trois informations : l'adresse IP du serveur (ou son nom d'hôte), votre login et votre mot de passe. Ceux-ci vous sont fournis par votre hébergeur.

------------------------------------------- EXPRESSION RATIONNELLES (REGEX)

***************************************** TIPS **************************************

Enlever tous les chiffres d'une STR :

>>> import re 
>>> re.sub(string">'\D', '', 'aas30dsa20') 
'3020'

\D correspond à tout caractère non numérique.

---------------------------------------

Enlever tous les caractères spéciaux d'une STR :

>>> import re
>>> somestring='in this/string /i have many. interesting.occurrences of {different chars} that need     to .be removed  '
>>> rx = re.compile('\W+')
>>> res = rx.sub(' ', somestring).strip()
>>> res
'in this string i have many interesting occurrences of different chars that need to be removed'

*************************************************************************************

En anglais, regular expression

Normes : POSIX, PCRE(Perl), ECMAScript, ..

Quantificateurs : 
tous caractères (sauf \n) :  .
0 ou 1 fois : ?
0 ou plusieurs fois : *
1 fois ou plusieurs fois : +
N fois : {N}
Au moins N fois : {N, }
Entre N et M fois : {N, M}

str  = "R"
       "Rr"
       "RRrrrr"

pattern = "(R|r)+"

Metacaractères : 
lire par début de chaine : ^
lire par fin de chaine : $
Caractère d'échappement : \  ou \n   ou \t
Caractère de groupement : |

str = "hello everyone"
      "hello world"
pattern = "^hello (world|everyone)$" 

str = "		bonjour"
pattern = "^[\ta-z]$+"

chercher un ensemble de lettre, pattern = "[abcde]" ou aller plus vite "[a-e]", pareil pour chiffre

exclure un ensemble de caractère de la recherche = "[^0-9]"

------------------------------------------- WEB3 / GETH

pip install web3
pip install eth_tester  (permet de simuler une connexion node - limité)

en cas de pb avec json : pip install --force-reinstall jsonschema==3.2.0

dans le script :

from web3 import Web3
from web3 import EthereumTesterProvider

w3 = Web3(EthereumTesterProvider())

w3.isConnected()           #doit retourner True

supprimer database : geth removedb


--------------- FOURNISSEUR DE NOEUD : GETH - GO ETHEREUM 

0°) Installer l'exécutable pour télécharger le noeud : https://geth.ethereum.org/downloads/

1°) Une fois installé, lancer la synchronisation du noeud en mode FULL, via terminal taper : geth --syncmode full

2°) Une fois synchronisé, créer un compte via terminal :  geth account new


---------------------------- ASSERT 

Permet de verifier itérativement qu'une condition est valide lors de la compilation du code

ex : assert 3 > 2

ex 2 :
>>> assert x is y
>>> assert x is not y
Traceback (most recent call last):

marche aussi avec all et any :
ex : 
>>> assert all([True, True, True])
>>> assert all([True, False, True])
Traceback (most recent call last):
    ...
AssertionError

>>> assert any([False, True, False])
>>> assert any([False, False, False])
Traceback (most recent call last):

ajouter des commentaires lors du catch de assert : assert len(ports) > 0, f"ports expected a non-empty tuple, got {ports}"
ex complet :
def get_response(server, ports=(443, 80)):
    assert len(ports) > 0, f"ports expected a non-empty tuple, got {ports}"
    for port in ports:
        if server.connect(port):
            return server.get()
    return None

Now, how can you actually disable your assertions? Well, you have two options:

Run Python with the -O or -OO options.

 python -O 


-------------------------------------- LES UNITESTS TESTS UNITAIRES

import unittest

------------------------------------------------- POSTGRE SQL :

A) Installer le dernier client : https://www.enterprisedb.com/downloads/postgres-postgresql-downloads

tutoriel POSTGRESQL : https://www.postgresqltutorial.com/postgresql-python/connect/

serveur : [localhost]
Name : postgres
CDS superutilisateur : archi
port : 5432

B) Installer le module python pour communiquer avec postgresql (créer environnement virtuel et installer dedans):

pip install psycopg2

commandes ----- :


Routine :
0. se logger dans psql
1. Create database via psql
2. Via pgAdmin creer tables ou via script

Notice that if you git, you need to add the database.ini to the .gitignore file to not committing the sensitive information to the public repo like github. 

---------------------------

0°)  Créer espace disque pour la tabme, via le terminal psql



---------------------------
1°) COMMANDES PSQL
---------------------------

Accéder aux tablespaces existant : \db dans terminal psql

Affichier les BDD existantes ; \l    ou    \l+

Afficher le contenu d'une table : \d nomtable

Créer espace mémoire de table
CREATE TABLESPACE tablespace_name
OWNER user_name
LOCATION directory_path;

supprimer BDD : DROP DATABASE [IF EXISTS]  nom_bdd;

créer BDD : CREATE DATABASE nomdatabase;

quitter le terminal psql : \q
---------------------------

2°) SE CONNECTER A LA BASE 

conn = psycopg2.connect(
    host="localhost",
    database="nom_database",
    user="postgres",
    password="archi")

OU CREER FICHIER INI (database.ini)
contenu :

[postgresql]
host=localhost
database=nom_database
user=postgres
password=archi

---------------------------

#!/usr/bin/python
import psycopg2
from config import config

def connect():
    """ Connect to the PostgreSQL database server """
    conn = None
    try:
        # read connection parameters
        params = config()

        # connect to the PostgreSQL server
        print('Connecting to the PostgreSQL database...')
        conn = psycopg2.connect(**params)
		
        # create a cursor
        cur = conn.cursor()
        
	# execute a statement
        print('PostgreSQL database version:')
        cur.execute('SELECT version()')

        # display the PostgreSQL database server version
        db_version = cur.fetchone()
        print(db_version)
       
	# close the communication with the PostgreSQL
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()
            print('Database connection closed.')


if __name__ == '__main__':
    connect()

---------------------------

CREER UNE OU DES TABLES :

To create a new table in a PostgreSQL database, you use the following steps:

First, construct CREATE TABLE statements.
Next, connect to the PostgreSQL database by calling the connect() function. The connect() function returns a connection object.
Then, create a cursor object by calling the cursor() method of the connection object.
After that, execute the CREATE TABLE by calling the execute() method of the cursor object.
Finally, close the communication with the PostgreSQL database server by calling the close() methods of the cursor and connection objects.

def create_tables():
    """ create tables in the PostgreSQL database"""
    commands = (
        """
        CREATE TABLE vendors (
            vendor_id SERIAL PRIMARY KEY,
            vendor_name VARCHAR(255) NOT NULL
        )
        """,
        """ CREATE TABLE parts (
                part_id SERIAL PRIMARY KEY,
                part_name VARCHAR(255) NOT NULL
                )
        """,
        """
        CREATE TABLE part_drawings (
                part_id INTEGER PRIMARY KEY,
                file_extension VARCHAR(5) NOT NULL,
                drawing_data BYTEA NOT NULL,
                FOREIGN KEY (part_id)
                REFERENCES parts (part_id)
                ON UPDATE CASCADE ON DELETE CASCADE
        )
        """,
        """
        CREATE TABLE vendor_parts (
                vendor_id INTEGER NOT NULL,
                part_id INTEGER NOT NULL,
                PRIMARY KEY (vendor_id , part_id),
                FOREIGN KEY (vendor_id)
                    REFERENCES vendors (vendor_id)
                    ON UPDATE CASCADE ON DELETE CASCADE,
                FOREIGN KEY (part_id)
                    REFERENCES parts (part_id)
                    ON UPDATE CASCADE ON DELETE CASCADE
        )
        """)
    conn = None
    try:
        # read the connection parameters
        params = config()
        # connect to the PostgreSQL server
        conn = psycopg2.connect(**params)
        cur = conn.cursor()
        # create table one by one
        for command in commands:
            cur.execute(command)
        # close communication with the PostgreSQL database server
        cur.close()
        # commit the changes
        conn.commit()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()


if __name__ == '__main__':
    create_tables()



-------------------------------- INSERER LIGNES DANS BDD

import psycopg2
from config import config


def insert_vendor(vendor_name):
    """ insert a new vendor into the vendors table """
    sql = """INSERT INTO vendors(vendor_name)
             VALUES(%s) RETURNING vendor_id;"""
    conn = None
    vendor_id = None
    try:
        # read database configuration
        params = config()
        # connect to the PostgreSQL database
        conn = psycopg2.connect(**params)
        # create a new cursor
        cur = conn.cursor()
        # execute the INSERT statement
        cur.execute(sql, (vendor_name,))
        # get the generated id back
        vendor_id = cur.fetchone()[0]
        # commit the changes to the database
        conn.commit()
        # close communication with the database
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()

    return vendor_id


--------------------------------- REQUETE POSTGRE FETCHALL

def get_parts():
    """ query parts from the parts table """
    conn = None
    try:
        params = config()
        conn = psycopg2.connect(**params)
        cur = conn.cursor()
        cur.execute("SELECT part_id, part_name FROM parts ORDER BY part_name")
        rows = cur.fetchall()
        print("The number of parts: ", cur.rowcount)
        for row in rows:
            print(row)
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()

-----------------------------------UPDATE POSTGRE

#!/usr/bin/python

import psycopg2
from config import config


def update_vendor(vendor_id, vendor_name):
    """ update vendor name based on the vendor id """
    sql = """ UPDATE vendors
                SET vendor_name = %s
                WHERE vendor_id = %s"""
    conn = None
    updated_rows = 0
    try:
        # read database configuration
        params = config()
        # connect to the PostgreSQL database
        conn = psycopg2.connect(**params)
        # create a new cursor
        cur = conn.cursor()
        # execute the UPDATE  statement
        cur.execute(sql, (vendor_name, vendor_id))
        # get the number of updated rows
        updated_rows = cur.rowcount
        # Commit the changes to the database
        conn.commit()
        # Close communication with the PostgreSQL database
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()

    return updated_rows


if __name__ == '__main__':
    # Update vendor id 1
    update_vendor(1, "3M Corp")

-------------------------------------------- ENVIRONNEMENT VIRTUEL --------------------------------------------

1°) Créer environnement virtuel, dans terminal windows écrire ;

python -m venv chemindudossierouseramisl'env

ex python -m venv C:\Users\solut\Desktop\env_test

2°) Activer l'environnement virtuel, dans le terminal écrire ;

chemindufichier\activate.bat

ex 

ex python -m venv C:\Users\solut\Desktop\env_test\Scripts\activate.bat

il sera alors écrit (env_test) C:\Users\...

3°) Désactiver l'env virtuel, saisir dans terminal :

deactivate.bat ou deactivate

---- créer fichier REQUIREMENTS . TXT

1°) dans l'env virtuel, après installation des packages nécessaires au script, créer le fichier via le terminal :

pip3 freeze > requirements.txt  

2°) MAJ du fichier via pip freeze

------------------------  MATPLOTLIB

0°) deux façons de l'utiliser : via une programmation orientée objet, ou via pyplot (plus simple)

ex :

import matplotlib.pypilot as plt
plt.plot(x, y, c="black", lw=3, ls='--')
plt.show()

c = couleur du trait
lw = épaisseur du trait
ls= style du trait


--------------------------------------

1°) créer une nouvelle figure de courbes :

import matplotlib.pypilot as plt

plt.figure(figsize=(12,8)   # créer une figure et définir la taille (en pouces et pas cm)
plt.plot(x, y, label="nom_legende_courbe1")   # première courbe
plt.plot(x, x**3, label="nom_legende_courbe2")   # première courbe
plt.title("figure 1")     # titre du graphique
plt.xlabel("axe X")     #titre de l'axe X
plt.ylabel("axe Y")     #titre de l'axe Y
plt.legend()    afficher la legende (nom des courbes écrit dans les fonction de courbes)
plt.show()   afficher le résultat
plt.savefig("export_figure.png")    #enregistrer en local dans un fichier la figure


2°) Créer plusieurs graphique (deux graphiques sur deux lignes et sur une colonne) dans une seule figure :

plt.figure()

# graphique 1
plt.subplot(2,1,1)    (lignes, colonnes, position du graphique visé)
plt.plot(x, y) 
plt.title()

# graphique 2
plt.subplot(2,1,2) 
plt.plot(x, y)
plt.title()

plt.show()

2°) Créer plusieurs graphique (quatre graphiques sur deux lignes et sur deux colonne) dans une seule figure :

plt.figure()

# graphique 1
plt.subplot(2,2,1)    (lignes, colonnes, position du graphique visé)
plt.plot(x, y) 
plt.title()

# graphique 2
plt.subplot(2,2,2) 
plt.plot(x, y)
plt.title()

# graphique 3
plt.subplot(2,2,3)    (lignes, colonnes, position du graphique visé)
plt.plot(x, y) 
plt.title()

# graphique 4
plt.subplot(2,2,4) 
plt.plot(x, y)
plt.title()

plt.show()

3°) la méthode orientée objet :

fig, ax = plt.subplots(2, 1, sharex = True)    # créer les objets figure, et axes, sur deux lignes et une colonne, partager l'axe X)
ax[0].plot(x, y)   # définir les axes X et Y du premier graphique
ax[1].plot(x, y**3)   # créer le deuxième graphique
plt.show()    # afficher


----------- ENV VIRTUEL DANS VS CODE

1°) via terminal windows, se placer dans le dossier d'env virtuel et lancer vs code (via code .)
2°) Le dossier est chargé dans vs code, se placer via la commande terminal de VS code dans le dossier réseau script qui contient activate.bat
3°) taper ./activate pour activer l'environnement virtuel
3.1°) Si cela ne fonctionne pas à cause de droits réseau, checker l'état des droits via terminal VS code : Get-ExecutionPolicy
3.2°) Changer la permission de lecture pour lancer activate si besoin ; Set-ExecutionPolicy Unrestricted -Scope CurrentUser
4°) Quand activate fonctionne, le terminal affiche (env_test) 


----------------------------------------------------- API TWITTER

documentation officielle developpeur : https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/introduction
documentation officielle tweepy : https://docs.tweepy.org/en/stable/index.html

0°) créer un compte développeur, créer son projet et son app, générer les clés d"accès (2.0 pour lecture, et 1.0 pour écriture (read & write)
1°) Installer tweepy : pip install tweepy

Très bonne vidéo YT de vulgarisation de l'API : https://www.youtube.com/watch?v=0EekpQBEP_8

----------- Créer un tweet (écriture)

client_push = tweepy.Client(
    consumer_key="umt44RMbanw28T6PP0xgvXbYw",
    consumer_secret="DaeZbDtyImQnkZQashS8YIDiSBj8QnpRFexr7LUh5C6bcPcJKM",
    access_token="1523774147528122368-hXQp34MemBIhLDDNxdzaigyEh0f51h",
    access_token_secret="bVEijHAhW6bsw6OYrHJbUdXa9P08lAXBajvTiiadOJVJi",
)

create_tweet = client_push.create_tweet(text="Hello world")

print(create_tweet)


---------- récupérer info d'un user + récupérer tweets  (lecture)

import tweepy

bearer_token = "AAAAAAAAAAAAAAAAAAAAABmqcQEAAAAAZIdNWuGjgMVaEydZIeAUWonl5xc%3DtedTYb7LJ6kPmCMKYvnzsmMjQtDl5r1k6ZzXanpxhX8VqyhaRh"

client = tweepy.Client(bearer_token=bearer_token)

# rechercher les tweets recents contenant des mots clés
query = "bitcoin"
# tweets_recents = client.search_recent_tweets(query=query, max_results=50)

# récupérer informations de l'utilisateur :
# id
# name
# username
# includes, errors, meta
infos_user = client.get_user(username="Nostrase")

# récupérer les tweets d'un utilisateur via son id
tweets_user = client.get_users_tweets(id="1431186904079376387")



----------------------------------------------------- LINUX
KALI
setxkbmap fr : mettre en français le keyboard

devenir root (mode admin) sudo su
MAJ des logiciels embarqués : apt update && apt upgrade -y

Id et mdp : kali -peut etre mdp ok

METASPLOITABLE ID :
msfadmin
msfadmin

commandes ; 
ifconfig : connaitre son IP
netstat -antp: voir tous les ports qui sont en écoute
clear : nettoyer l'écran

NMAP (comme ZENMAP) ; scan ip

nmap 192.... : scanner les ports ouvert de l'ip

OWASP
Username : root
password : owaspbwa
IP : 192.168.1.17


les ranges d'ip (à confirmer : 16/254)

Terminal KALI LINUX, se connecter à un compte user connu d'un nom de domaine connu;

ssh user@192.168....(ip du domaine)

puis le terminal va demander mdp à saisir

Pour etre sur d'etre sur le bon compte, commande : whoiam

****************************************************************************************************
****************************************************************************************************
****************************************************************************************************

Commandes shell :

mkdir dossieracreer : créer un dossier qui s'apelle dossieracreer
cd dossieracreer : se déplacer dans le dossieracreer
cd .. : retourner dans le dossier source 

Afficher les capacités et utilisations de chaque commande grâce à /?
ex : cd /?

lire contenu d'un répertoire
sous Windows, commande : dir
sous linux, commande : ls
faire apparaitre les fichiers cachés : ls -la

dans un chemin d'accès, les répertoires sont séparés par \ sous windows (antislash) et slash sous LINUX

Shell sous windows :
important, enregistrer le fichier de script en .bat 
a la fin du programme, met le programme en pause avant que le terminal se ferme de suite : pause
Afficher à l'écran un mot : echo motaafficher
Afficher a l'écran le mot dans la commande saisie avant : 
@echo off
echo motaafficher

afficher une remarque : rem contenudelaremarque
afficher un commentaire : ::voicimoncommentaire

utiliser le @echo off pour enlever les commentaires visibles lors de l'affichage terminal du script


****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
SOLIDITY

#######TIPS

Les lignes de codes se finissent par ";"
Ajouter du faux crédit à son wallet pour tesnet : RESEAU RINKEBY
voir
docs.chain.link/docs/link-token-contracts/
puis dans l'IDE, changer l'environnement de java à injected Web3 pour passer sur le testnet RINKEBY (si wallet Metamask)

#######/TIPS

Fichier SOL

IDE SOLIDITY :

https://remix.ethereum.org/

Décoder hexbytes dans API node geth : https://github.com/ethereum/hexbytes

pip install hexbytes

PYTHON EVM - ETHEREUM PYHTON - Intéragir

Site de liens référencés ;

https://ethereum.org/fr/developers/docs/apis/backend/

GITHUB ETHEREUM PYTHON ;

https://github.com/ethereum/web3.py

Quickstart READ THE DOCS ;

https://web3py.readthedocs.io/en/latest/quickstart.html

#########################################################################

Travailler avec les versions egales ou inférieure à 6 de solidity

pragma solidity ^0.6.0;

#########################################################################

Architecture de base d'un fichier Solidity : spécifier la licence utilisée (voir : https://spdx.org/licenses/)

// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.6.0;

contract StockageSimple {

}

#########################################################################

Ex de Différents types de variables ;

// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.6.0;

/// création de contrat avec differentes variables

contract StockageSimple {

    uint256 nombreFavori = 5;
    bool booleenFavori = true;
    string chainedecaractere = "String";
    int256 intFavoriNegatifOuPositif = -5;
    address addresseFavorie = 0x09f0F5035f9633c58b3493D4C4334291E643B262;
    bytes32 byteFavori = "cat";

}

#########################################################################

contract StockageSimple {

    /// cette commande va initialiser une variable (nombrefavori) a 0

    uint256 nombreFavori;

}

######################################################################### Création d'un premier contrat

// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.6.0;

/// création de contrat avec differentes variables

contract StockageSimple {

    // cette commande va initialiser une variable a 0
    uint256 nombreFavori;

    // création d'une fonction qui reprend la variable
    function stocker(uint256 _nombreFavori) public {
        nombreFavori = _nombreFavori;
    }

}

###### Ce contrat permet de stocker une variable, le mot clé "public" permet de rendre publique la fonction lors de l'appel du contrat

On peut aussi afficher une variable en écrivant par exemple ;

uint256 public nombreFavori;

#############################

function recuperer() public view returns(uint256) {
	return nombreFavori;}

Fonction qui s'appelle recuperer, sans paramètres, qui est public
qui a une capacité de lecture de la blockchain, et qui doit retourner un entier (via le parametrer returns)


###### ###### ###### ###### ###### ###### ###### ###### ###### 

Les différents mots clés pour la visibilité des variables et fonctions des smart contracts  ;

public : permet d'appeler la fonction d'un contrat, permet de rendre visible une variable lors d'un appel de contrat
private : permet a la fonction ou a la variable visée de n'être vue que par le contrat
external : permet de qualifier une fonction d'externe, elle peut seulement être appelée par un autre contrat via des transactions
internal : autorise l'accès à la fonction/variable visée de n'être appelée que par le contrat actuel (intern)

#################################################### Création d'un objet via struct

le mot réservé "struct" permet de construire un objet, ex d'un objet correspondant à un groupe de gens 
permettant d'associer un nombre favori à qqn

        struct GroupeDeGens {
            uint256 nombreFavori;
            string nomDeLaPersonne;

        }

On peut ensuite creer des objet via le struct pré-défini ;

GroupeDeGens public personne = GroupeDeGens({nombreFavori = 5, nomDeLaPersonne = "Michel"});

################### Creer des listes / tableaux / array

GroupeDeGens[] public people;

Va créer une liste dont l'entrée est people, si on écrit GroupeDeGens[1], le nombre maximal sera de 1

Pour créer une liste dynamique, et pouvoir saisir des entrées, voici une fonction :

function addPersonne(string memory prenom, uint nombreFavori) public {
	people.push(GroupeDeGens(nombreFavori, prenom));}

Le mot clé memory permet de créer un enregistrement temporaire de la data, 

Le mot clé storage permet de créer un enregistrement persistant de la data

################### MAPPING : lier des données entre elles

        struct GroupeDeGens {
            uint256 nombreFavori;
            string nomDeLaPersonne;

        }

GroupeDeGens[] public people
mapping(string => uint256) public nameToFavoriteNumber;

function addPersonne(string memory prenom, uint nombreFavori) public {
	people.push(GroupeDeGens(nombreFavori, prenom));}
	nameToFavoriteNumber[nomDeLaPersonne] = nombreFavori

On pourra donc retrouver le numéro d'une personne suivant son prénom

#################### Pure / View

View est une qualité de fonction à ajouter, qui permet d'informer que la fonction a un rôle de lecture de la blockchain

Pure est une qualité de fonction à ajouter, qui permet d'informer que la fonction à un rôle de calcul (elle contient une opération à réaliser)

################### importer fichier solidity

import "path", si le .sol est dans le même dossier que le main, alors cela donnerait 

import "./fichier_a_importer.sol";

On peut faire hériter un contrat de toutes les fonctions et variables d'un autre contrat

ex :

import "./fichier_a_importer.sol";

contract StorageFactory is SimpleStorage

comme ceci, le StorageFactory va récupérer tout le contenu de SimpleStorage

######################## Créer un contrat de paiement : envoyer des fonds à une adresse

contract FundMe {
	mapping(address => uint256) public addresseVisee;

	function fund() public payable {
		addresseVisee[msg.sender] += msg.value;}}

Le mapping sert à lier une adresse au montant
le mot clé payable permet de créér la capacité de payer dans le contrat

######### AJOUTER UN PRICE FEED OU AUTRE API CHAINLINK

importer le module chainlink : 

import "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol"

ou voir sur GithHub chainlink : https://github.com/smartcontractkit/chainlink

Récupérer la liste des data feed sur : https://data.chain.link/

code créer datafeed prix token

function getPrice() public view return(uint256) {
AggregatorV3Interface priceFeed =  AggregatorV3Interface(adresseen0x)
(,int256 answer,,,) = priceFeed.latestRoundData();
	return uint256(answer * 10000000000000);

########### RECUPERER DES MATRICES DE SMART CONTRACTS EXISTANTS :

à installer :

$ npm install @openzeppelin/contracts

le site source :

https://docs.openzeppelin.com/

exemple des modules à importer via import : SafeMath

############## CONDITION IMPOSEE / REQUISE : required

pour créer une condition spécifique de saisie ou autre, on peut utiliser le mot réservé required

ex, fonction fund, pour envoyer minimum 50$, avec message qui s'affiche en cas de non respect du required

function fund() public payable {
	uint256 minimumUSD = 50;
	required(getConversionRate(msg.value) >= minimumUSD, "You need to spend more ETH!");
	adresseToAmountFunded[msg.sender] += ;}

######### Fonction transfert

function withdraw() payable public {
	msg.sender.transfer(address(this).balance);}

##### constructeur / constructor

on peut utiliser le mot clé constructor() pour créer des constantes inter contrat,
comme désigner que l'on est owner du contrat (pour se donner des droits d'appel de contrat ou autre)

ex :

constructor() public{
	owner = msg.sender;}


****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
GIT / GITHUB / LINUX
#########################

Installer linux sur windows

https://docs.microsoft.com/en-us/windows/wsl/setup/environment

Installer Git 

https://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-git

Installer environnement windows sur terminal linux

https://docs.microsoft.com/en-us/windows/terminal/install

Installer visual studio code sur linux

https://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode

Générer une clé SSH pour github ;

https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
0°) créer clé via : $ ssh-keygen -t rsa -b 4096 -C "johndoe@example.com"
1°) récupérer la clé publique (id_rsa.pub) dans dossier .ssh réseau (masqué)
2°) aller sur git hub, ajout de clé et ajouter la clé

################################### INITIALISATION GIT (CLIENT DESKTOP)

se placer dans git bash (terminal git)
0°) créer un dossier spécifique sur bureau ou autre
1°) se placer dedans via cd
2°) git config --global user.name nom_compte_github
3°) git config --global user.email mail_compte_github
4°) git config --global color.diff auto
5°) git config --global color.status auto
6°) git config --global color.branch auto
7°) git init (se placer dans dossier du nouveau projet via cd de git bash)


############ Premiere utilisation : connecter le repo local au distant :

0°) git init (se placer dans dossier du nouveau projet via cd de git bash)
0.1°) git add nom_dossier ou nom_fichier : indexer contenu
0.2°) git commit -m "message blabla" : enregistrer le contenu avant push
1°) dans le dossier visé : git remote add origin https://github.com/4rchiTech/Openclassrooms.git
2°) git branch -M main : connecter les deux repo
3°) git push -u origin main : push du contenu

NB : si besoin lors de pb de connexion étape 2, utiliser d'abord >>> git fetch 
si ne marche pas utiliser git remote set-url origin https://github.com/4rchiTech/Openclassrooms.git
enlever une remote si bug : git remote rm origin

############ Routine 

0°) lors de nouvelles modifications des fichiers de travail : git add (créer une liste d'actions à valider)
1°) valider les modifications : git commit (enregistrer les modifications en local)
2°) pousser les nouveaux fichiers sur le dépôt distant github : git push origin main

###################################

Chemin pour ouvrir visual dans ubutun

Ouvrir WSL
Ouvrir Ubuntu
Se mettre dans le dossier UNCAGED via cd (cd repo)
Ouvrir VS code

############################### 

Pour retrouver la racine de l'univers utilisateur 

cd 

ou cd ~

############################### 

afficher le nom du dossier dans lequel on est placé

pwd

##############################

afficher le nom des branches du repo

git branch

-------
créer branche
git branch nom_nouvelle_branche

------
switcher sur la nouvelle branche

git checkout nom_nouvelle_branche

----
fusionner la branche actuelle avec la branche principale

1°) se placer dans la branche principale via : git checkout main
2°) fusionner : git merge nom_nouvelle_branche

-------------
supprimer branche vide :

git branch -d nom_branche

supprimer branche non vide :

git branch -D nom_branche

-------------

pull request : pour créer une pull request il faut une déjà créer une branche projet et y placer sonc ode
##############################

cloner repo git : 

sur le github du projet, aller dans code et copier l'url html

dans le terminal git, taper : git clone url_cible_github

##############################

ouvrir vs code via ubunto 

code .

lancer l'exploreur pour retrouver le dossier dans lequel la commande est lancée (en GUI)

explorer.exe .


##############################

augmenter la longueur des nom de fichier path

git config --system core.longpaths true


##############################

Ajouter un dossier ou un fichier à l'index de suivi Git (tracking)

git add dossier ou git add * 

##############################

identifier les dossier ou fichiers trackés (dans l'index) dans Git

git status 

##############################

Déclarer/enregistrer une action sur le repo, pour exporter le dossier, et qualifier l'action

git commit

ajouter un message directement depuis la commande

ou git commit -m "message"

----------------

modifier le message du commit si erreur :

git commit --amend -m "nouveau commit sans erreur"

#############################

Pousser le repo local vers le repo distant (Github)

git push

#############################

Récupérer la dernière versio du repo stocké sur Github

git pull

#############################

Récupérer l'historique des commit 

git log

############################

****************************************************************************************************
****************************************************************************************************
****************************************************************************************************

Utiliser pip ;

pip install --upgrade pip

installation en force via fichier local du style ;

pip install --upgrade C://cheminaccès

ou via serveur (marche!)

python -m pip install Django --trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org

Changer Django par le module pip visé par ex ;

python -m pip install python-binance --trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org

MAJ forcée de pip ;

python -m pip install --upgrade pip --trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org


---------------- en cas de problèmes SSL, viser le fichier par le script suivant en cmd ;

pip install certifi
for /f %i in ('python -m certifi') do set SSL_CERT_FILE=%i
python exemple.py

****************************************************************************************************
****************************************************************************************************
****************************************************************************************************

Langage de définition des données (LDD ou DDL en anglais) - MYSQL
Structure des données ;
create : création
alter : modification
drop : suppression
rename : renommage

Création d'une table :

create table <nomdelatable>
(
	<colonne1> <type_colonne1>,
	<colonne2> <type_colonne1>,
	<colonneN> <type_colonneN>
);

Ex : 

create table Roman
(
	Code_ISBN CHAR(17) NOT NULL,
	NumerolivredansBDD NOT NULL AUTO_INCREMENT,
	nom VARCHAR(200),
	auteur VARCHAR(200) DEFAULT "Auteur a renseigner",
	année YEAR,
	CONSTRAINT NumRoman PRIMARY KEY(Code_ISBN)
);

create table CollectionDeRomans
(
	Code_collection NOT NULL AUTO_INCREMENT,
	NomCollection INT NOT NULL,
	CONSTRAINT CodedelaCollection PRIMARY KEY(Code_collection)
);

create table RomanDansCollection
(
	Code_ISBN CHAR(17) NOT NULL,
	Code_collection INT NOT NULL,
	CONSTRAINT RomanDansCollection PRIMARY KEY(Code_ISBN, Code_collection),
	FOREIGN KEY(Code_ISBN) REFERENCES Roman(Code_ISBN),
	FOREIGN KEY(Code_collection) REFERENCES CollectionDeRomans(Code_collection)
);

ALTER TABLE Roman ADD COLUMN Editeur VARCHAR(200);

VARCHAR correspond à une variable à longueur indéfinie dans une limite de 200 caractères
CHAR : pour les variable à longueur définie
CONSTRAINT : contrainte : ici définition de la clée primaire qui est numroman, numéro qui doit être obligatoiremenet indiqué (grâce à NOT NULL)
AUTO_INCREMENT permet de générer un numéro pour chaque ligne produit (peut-être défini en clé primaire)
On peut lier deux tables, en en créant une troisième qui servira de jonction, il faut alors croiser les clés et les identifier (clé etrangère : clé primaire d'une autre table)
ALTER : Permet de modifier une table déja existante, spécifier l'action visée (par ex : ADD COLUMN)
DEFAULT : Permet d'afficher une valeur par défaut quand la valeur n'est pas renseignée

Le type de colonne est très important et à définir (numérique/nb a virgule/date et heure/texte)
ex : 
Numérique : TINYINT / SMALLINT / MEDIUMINT / INT // BIGINT
Nb a virgule : FLOAT / DOUBLE / DECIMAL
Date & heure : TIME / TIMESTAMP / DATETIME / DATE / YEAR
Texte : CHAR / VARCHAR / TEXT / BLOB

Suppression d'une table (définitif) :

drop table <nomdelatable>

****************************************************************************************************
****************************************************************************************************
****************************************************************************************************

SML - EMACS

la touche meta est = à ECHAP
C = Ctrl

Creer un nouveau fichier SML dans EMACS :

First, edit an existing or new SML file, try : C-x C-f test.sml

###########"

 Using the SML/NJ REPL (Read-Eval-Print Loop) in Emacs
At this point, we are done installing! This section shows you how to run SML programs from within Emacs. It assumes you already have an SML file or can write your own SML program in a new one.

Edit a file with extension .sml. You should be in SML-mode, using Tab to indent your code well.

To create the *sml* buffer (which holds the REPL), type C-c C-s (and then Return/Enter) in the buffer with the .sml file. (Note: This will not work in the *scratch* buffer that Emacs starts in because this buffer is not in SML Mode.)

Keep the .sml file(s) you are working with for a particular assignment in the same folder. When you type C-c C-s to start the REPL from a buffer for foo.sml, the REPL will look in the right folder for foo.sml when you type use "foo.sml"; and will look in the same folder for any other file you use such as foo_tests.sml. This is less confusing than trying to keep track of different folders and paths while using the REPL although that is possible.

To end and restart a REPL session, type C-d (to end it) and C-c C-s (and then Return/Enter) (to restart it). You must type C-d while in the *sml* buffer; you can type C-c C-s from the *sml* buffer or a buffer with a .sml file.

By ending and restarting a session, the new session has an empty environment. Your earlier interactions are still in the *sml* buffer, so you can save them, cut-paste them, etc., but they have no effect on the evaluation in the restarted REPL session.

Evaluation can go into an infinite loop.

This has likely occurred if you are not getting the "-" prompt back and nothing appears to be happening.

C-c C-c will interrupt evaluation and get you your prompt back.

##############"

To end and restart a REPL session, type C-d (to end it) and C-c C-s (and then Return/Enter) (to restart it). You must type C-d while in the *sml* buffer; you can type C-c C-s from the *sml* buffer or a buffer with a .sml file.

By ending and restarting a session, the new session has an empty environment. Your earlier interactions are still in the *sml* buffer, so you can save them, cut-paste them, etc., but they have no effect on the evaluation in the restarted REPL session.


****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
HTML :

ASTUCES  :
1. créer un commentaire :  <!-- Remarque -->
2. voir si un plug in ou une fonctionnalité est prise en charge par des navigateurs : caniuse.com
3. Tester itérativement la validité de son code : https://validator.w3.org

structure minimale page HTML 

<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8" />
		<title> Titre de la page </title>
	</head>
	<header>
	</header>
	<nav> 
	</nav>
	<section>
	</section>
	<aside>
	</aside>
	<article>
	</article>
	<footer>
	</footer>

	<body>
	</body>
</html>



LES BALISES :

<meter value='xx'>X% </meter> : balise pour afficher les pourcentages

<span> </span> : balise inline, permet de selectionner un bout de texte pour lui appliquer ce que l'on veut (span & div sont des balises "neutres")
<div> </div> : balise block, créer un bloc d'objet
<h1> </h1> : créer un titre, sous titre... (jusqu'à h6)

<p> </p> : créer un paragraphe
<br /> : sauter une ligne
<em> </em> : écrire en italique
<strong> </strong> : écrire en gras
<mark> </mark> : surligner le textte (comme un marqueur)

<ul> 
    <li> Fraises </li>
    <li> Framboises </li>   
</ul> : créer une liste à puces (ul) avec puces rondes  à l'intérieur (li)

<ol> 
    <li> Fraises </li>
    <li> Framboises </li>   
</ol> : créer une liste numérotée (ol) avec puces numérotées (li)

<a href="chemin url">Nom du lien à cliquer</a> : créer un lien hypertext à cliquer

<a href="#cuisine">Nom de la partie du site à atteindre : la cuisine </a> 
<h2 id="cuisine"> La cuisine </h2> : ces deux lignes permettent de créer un lien intra site pour atteindre une rubrique en cliquant sur le lien
fonctionne gâce au # et à l'id relié.
On peut mettre le id sur tout (paragraphe, titres, ...)
L'attribut id  sert à donner un nom « unique » à une balise, pour s'en servir de repère. 

atteindre une autre page du site : <a href="dossiersite/page2.html">Nom du lien à cliquer</a> : créer un lien hypertext à cliquer


Ajouter une infobulle quand on pointe un lien sur le site : 
<p> Souhaitez-vous visiter <a href ="https://blabla" title="Vous ne le regretterez pas !"> le site OPEN classroom </a> ? </p>
fonctionne grâce à title

Créer une nouvelle fenetre quand le lien est cliqué :
<p> Souhaitez-vous visiter <a href ="https://blabla" title="Vous ne le regretterez pas !" target="_blank"> le site OPEN classroom </a> ? </p>
fonctionne grâce à target

Envoyer un email quand le lien est cliqué ;
<p> <a href="mailto:lemailvise@machin.com"> Envoyez-moi un email !</a> </p>

Faire télécharger un fichier quand le lien est cliqué :
<p> <a href="fichier.zip"> Téléchargez le fichier </a> </p>
Le fichier doit etre dans le même dossier que le HTML du site

Si vous faites un lien vers un site qui comporte une adresse un peu bizarre avec des &, comme http://www.site.com/?data=15&name=mateo21  , vous devrez remplacer tous les « & » par « &amp; » dans votre lien, comme ceci :http://www.site.com/?data=15&amp;name=mateo21  .
Vous ne verrez pas la différence, mais cela est nécessaire pour avoir une page web correctement construite en HTML5.


3 types de fichier visuels :
GIF : image animée
PNG : images autres que photographies (ce format permet de détourer)
JPEG : photos

insérer une image dans une page :

<img src="dossierdusite/montagne.jpg" alt="photo de montagne"/>
alt est une description sommaire de la photo (pour malvoyants & robots)

insérer une mini-image qui renvoie vers l'image pleine taille :

<a href="dossier/imagepleinetaille.jpg"><img src="dossierdusite/montagne_mini.jpg" alt="photo de montagne"/> </a>

insérer une image figure (image avec sous titre, comme pour présenter tableau ou autre)
<body>
	<figure>
		<img src ="dossier/image.png" alt="figure stylée" />
		<figcaption> Cette figure est stylée </figcaption>
	</figure>
</body>
fonctionne avec figure et figcaption qui indique une description affichée sous l'image

Ajouter des éléments neutres


##################################### ajouter DES TABLEAUX

titre de tableau : <caption> </caption>
premiere ligne tableau pour entete : <th> </th>
ligne tableau : <tr> </tr> : les lignes se superposent
cellule tableau : <td> </td>   les cellules s'alignent 
fusion de cellules : voir ex ci-dessous

structure type :

<table>
	<caption> Titre du tableau </caption>
	<tr>
		<th> Entete colonne Nom </th>
		<th> Entete colonne Age </th>
		<th> Entete colonne Pays </th>
	</tr>

	<tr>
		<td> Carmen </td>
		<td> 33 ans </td>
		<td> Espagne </td>
	</tr>

	<tr>
		<td colspan="2"> 2 cellules fusionnées horizontalement </td>
		<td rowspan="2"> 2 cellules fusionnées verticalement </td>
	</tr>


</table>


#### CSS TABLEAU

Ajouter bordures au tableau avec bordures collées intra cellules (pour avoir un "vrai" tableau)

td
{
	borde: 1px solid black;
}

table
{
	border-collapse: collapse;
}


##################################### LES FORMULAIRES

créer un formulaire : <form method="post" action="traitement.py"> </form>
il faut indiquer la méthode (GET/POST) et la page back-end de traitement des saisies formulaires

créer un input text avec étiquette et le lier à l'étiquette:
maxlenght pour taille de saisie max
value pour inscrire déjà dans l'input une valeur
placeholder pour inscrire une valeur (grisée comme un exemple)

<p>
	<label for="pseudo"> Votre pseudo </label>
	<input type="text" name="pseudo" id="pseudo" maxlenght="5" value="valeur_par_defaut" placeholder="valeur_exemple" />
</p>

les types existants à part text :

il faut completer ces lignes avec une ligne avant, ex :

<p>
<label for="machin"> texte affiché </label>
<input type="xxx" name="machin" id="machin"/>
</p>

-----------

<textarea rows="5" cols="10"> préremplir le texte </textarea> : créer des colonnes de saisies

<input type="password" />

<input type="email" />

<input type="url" />

<input type="tel" />

<input type="number" min="10" max="100" step="20"/>

<input type="range" min="10" max="100" step="20"/> : créer une barre latérale à glisser pour choisir un nombre

<input type="color" />

<input type="date" />

<input type="search" /> : créer un champ de recherche

<input type="checkbox" checked /> : créer une tick box, déja cochée avec checked

<input type="radio" name="animal" value="chat" id="animal_chat"/><label for="nom_page">chat</label> : créer des boutons radio pour cocher, il faut garder le nom mais changer les avleurs
<input type="radio" name="animal" value="chien" id="animal_chien" /><label for="nom_page">chien</label>

############# Créer liste déroulante :

<form method ="post" action="traitement.py">
<p>
	<label for="pays"> Dans quel pays habitez-vous? </label><br />
	<select name="pays" id="pays">
		<optgroup label="Europe">
		    <option value="France"> France </option>
		    <option value="Espagne"> Espagne </option>
		    <option value="Grece" selected> Grece</option>
		</optgroup>

		<optgroup label="Asie">
		    <option value="Thailande"> Thailande</option>
		    <option value="Japon"> Japon</option>
		</optgroup>


	</select>
</p>
</form>

optgroup est facultatif
ajouter selected pour pré-choisir (voir grece)

############## CREER UN CADRE QUI RASSEMBLE UN ENSEMBLE DE FORMULAIRES

<form method="post" action="traitement.py">
	<fieldset>
		<legend> Vos coordonnées </legend>
			<p>
			   <label for="nom"> Quel est votre nom? </label>
			   <input type="text" name="nom" id="nom" autofocus required/>
			</p>

			<p>
			   <label for="prenom"> Quel est votre prenom? </label>
			   <input type="text" name="prenom" id="prenom" />
			</p>

			<input type="submit" value="envoyer">
	</fieldset>			

autofocus permet que le champ visé (un seul) soit déja préselectionner à l'ouverture de la page
required permet d'indiquer que le champ est une saisie obligatoire
il ne faut pas oublier le bouton submit pour envoyer le formulaire (envoyé sur la page d'action en .py)

######### AUDIO/VIDEO HTML

<audio src="musique.mp3" controls </audio>

formats audio acceptés : MP3/AAC/OGG

<video src="video.mp4" controls width="" height ="" poster="image_miniature.jpg"> Veuillez MAJ votre navigateur </video>

le texte ne s'affiche que si le navigateur ne peut pas lire la video

codecs video : H.264 / OGG THEORA / WEBM

site pour convertir videos : http://www.mirovideoconverter.com/

##############################################"" MEDIAS QUERIES / MEDIA QUERY

Navigateur - largeur du viewport par défaut :
Opera Mobile
850 pixels

iPhone Safari
980 pixels

Android
800 pixels

Windows Phone
1 024 pixels

Pour cibler les smartphones, plutôt que d'utiliser max-width  , il peut être intéressant de recourir à max-device-width, ex ;

@media all and (max-device-width: 480px)
{
    /* Vos règles CSS pour les mobiles ici */
}

Pour obtenir un rendu facile à lire, sans zoom, vous pouvez demander à ce que le viewport soit le même que la largeur de l'écran
insérer dans l'en-tête HTML (<head>)
<meta name="viewport" content="width=device-width" />

################

Deux options :
1°) Gérer les MQ dans un fichier unique avec le css "normal", avec un @media à la suite du css basique, ex :

@media screen and (max-width: 1280px)
{
    /* Rédigez vos propriétés CSS ici */
}

2°) Gérer les MQ dans un fichier séparé, ex :

<link rel="stylesheet" href="style.css" />    
<link rel="stylesheet" media="screen and (max-width: 1280px)" href="petite_resolution.css" />

Donc appel de 2 fichiers

########### OPTIONS DU MQ

color  : gestion de la couleur (en bits/pixel) ;
height  : hauteur de la zone d'affichage (fenêtre) ;
width  : largeur de la zone d'affichage (fenêtre) ;
device-height  : hauteur du périphérique ;
device-width  : largeur du périphérique ;
orientation  : orientation du périphérique (portrait ou paysage) ;

media  : type d'écran de sortie. Quelques-unes des valeurs possibles :
	1°) screen  : écran « classique »,
	2°) handheld  : périphérique mobile - ne fonctionne pas sauf sur Opera
	3°) print  : impression,
	4°) tv  : télévision,
	5°) projection  : projecteur,
	6°) all  : tous les types d'écrans

On peut rajouter le préfixe min-  ou max-  devant la plupart de ces règles. Ainsi, min-width  signifie « largeur minimale », max-height

Les règles peuvent être combinées à l'aide des mots suivants :

only  : « uniquement » ;
and  : « et » ;
not  : « non ».

ex :

/* Sur tous types d'écran, quand la largeur de la fenêtre est comprise entre 1024px et 1280px */
@media all and (min-width: 1024px) and (max-width: 1280px)

************************************************************************************************ CSS

MEMENTO DES PROPRIETE CSS

https://openclassrooms.com/fr/courses/1603881-apprenez-a-creer-votre-site-web-avec-html5-et-css3/1608902-memento-des-proprietes-css

-------------------------

Ajouter le code CSS à l'HTML :
Première technique ; ajouter le lien du fichier CSS dans la partie head du html :
<link rel="fichier CSS" href="style.css" />

Deuxième technique : ajouter le code CSS directement dans la partie head du html dans un balise <style> </style>

---------------------------------------------

astuces :
1. ajouter commentaire : /* Commentaires */

---------------------------------------------

commandes CSS :

changer taille police : utiliser px (ex : 24px) small/medium..(sans chiffres) ou em ex ;

p
{
	font-size: 1.3em;
}

---------------------------------------------
changer police écriture :
p
{
	font-family: Impact, "Arial Black", Arial
}
va utiliser d'abord impact, si n'existe pas arial black, ...
de façon native, voici la liste des police existantes ; Arial, Arial Black, Comic sans MS, Courier New, Georgia, Impact, Times New Roman, Trebuchet MS, Verdana

ou si l'on veut une police spécifique : voir site www.fontsquirrel.com et télécharger la police, mettre les fichier à coté du fichier css, ouvrir le stylesheet css (comprend @font face) et le copier dans notre fichier css

---------------------------------------------

transformer en italique un p
p
{
	font-style: italic;
}

---------------------------------------------
transformer en gras un p
p
{
	font-weight: bold;
}

---------------------------------------------
souligner tout le texte d'un p
p
{
	text-decoration: underline;
}
---------------------------------------------
mettre une barre au dessus du texte : 
p
{
	text-decoration: overline;
}
---------------------------------------------
centrer le texte :
h1
{
	text-align: center;
}

ou right, ou left, ou justify (pour jusitifer le texte)
---------------------------------------------
entourer de texte une image flottante
d'abord créer une classe pour l'objet image visé, puis faire appel dans css ;

.nomclasse
{
	float: right;
}

ou left, ou center
------------------------------------------
Pousser le texte au dela de l'image flottante :
d'abord créer une classe pour l'objet image visé, puis faire appel dans css ;

.nomclasse
{
	clear: right;
}

ou left, ou both
---------------------------------------------

selection des blocs et différentes string ;

liste des selecteurs :
https://www.w3.org/Style/css3-selectors-updates/WD-css3-selectors-20010126.fr.html#selectors

ex : sélectionner TOUTES les balises de la page via *
*
{
	color: blue;
	font-weight: bold;
}

---------------------------------------------
ex : selectionner le paragraphe qui suit le gros titre :
h1 + p
{
	color: blue;
	font-weight: bold;
}

---------------------------------------------
ex : changer couleur et ajouter gras écriture des paragraphes :
p
{
	color: blue;
	font-weight: bold;
}
---------------------------------------------
ex: changer la couleur de tous les em ou autre petite balise inclues dans d'autres balises ;
h1 em
{
	color: blue;
	font-weight: bold;
}
---------------------------------------------
ex: changer la couleur de toutes les balises a qui possèdent un attribut spécifique (ici "ici")
a[title="ici"]
{
	color: blue;
	font-weight: bold;
}

 ---------------------------------------------
ex : changer couleur et ajouter gras écriture des paragraphes et titre :
p, h1
{
	color: blue;
	font-weight: bold;
}
---------------------------------------------

ex : changer couleur et ajouter gras écriture d'un paragraphe spécifique, deux solutions ;

1°) créer dans le html une classe de l'élément, et y faire référence dans le fichier css :

fichier html : 
<p class="nomclasse"> Bonjour et bienvenue </p>

fichier css :

.nomclasse
{
	color: blue;
	font-weight: bold;
}

2°) créer dans le html un ID de l'élément, et y faire référence dans le fichier css :

fichier html : 
<p id="id_unique"> Bonjour et bienvenue </p>

fichier css :

#id_unique
{
	color: blue;
	font-weight: bold;
}

ATTENTION : plusieurs éléments peuvent avoir la même classe mais pour l'ID l'élément doit être unique, 
dans CSS, référence aux classes via le . et aux id via le #

---------------------------------------------
choisir couleur spécifique :

choisir via notation RGB
p
{
	color: rgb(250, 96, 204);
}

choisir via hexadecmial 
p
{
	color: #FFFFFF;
}

voir site ; www.colorpicker.com

---------------------------------------------
choisir couleur de fond de la page
body 
{
	background-color: rgb(250, 96, 204);
}

mettre une image en fond de page (doit être dans le même dossier, ou spécifier addresse) 

body 
{
	background-image: url("neige.jpg);
}

on peut ajouter des "options" au background ;
fixer le fond d'écran : background-attachment : fixed;
que le fond ne se repete pas : background-repeat : no-repeat;
que le fond soit positionné à une autre position : background-position: top-right;

ou utiliser une "super variable" background pour éviter les redondances de saisies ;

background: url("neige.jpg"), fixed no-repeat;

---------------------------------------------

rendre élément transparent / invisible / opaque
h1
{
	opacity; 0;
}

ou utiliser RGBA (le dernier est le coefficient d'opacité) ;

h1
{
	background-color: rgba(255,0,0,0.5)
}

---------------------------------------------
créer des bordures encadrantes ;
h1
{
	border: 3xp blue solid;
}

bordures existantes ;
pleine ; solid
pointillée ; dotted
large pointillés ; dashed
doublée : double
grasse extérieure : groove
grasse intérieure : ridge
angle haut gauche marqué ; inset
angle bas droit marqué ; outset

ou bordures spécifiques non encadrante ;

border-top
border-left
border-right
border-bottom

ou cibler les détails des bordures ex ;
border-top-width : taille de la bordure du haut
border-bottom-color : couleur de la bordure du bas

ou bordure non carrée mais arrondies ;

border-radius : 20px;

ou courbe elliptique :

border-radius: 20px / 10px;

créer bordure avec ombre 

box-shadow: decalage horizontal decalage vertical adoucissement dégradé couleur ombre
ex 
box-shadow : 6px 6px 6px black;

créer ombre pour texte (appliquer sur texte), ex ;
h1
{
	text-shadow: 6px 6px 6px black;
}
------------------- 
Ajuster la largeur/hauteur d'un block en pixel, en %, ..
h1
{
	width: 300px;
	min-width:
	max-width:
	min-height:
	max-height:
}
------------------- 
les marges : intérieures aux blocks (padding) ou extérieures aux blocks (margin)
ex :
p
{
	width: 350px;
	border: 1px solid black;
	text-align: justify;
	margin: 50px;     /* marge extérieure de 50 pixels */
	padding: 12px; /* marge intérieure de 12 pixels */
}

autres commandes :

margin-left, right, top, bottom, ...
padding-left, ....

on peut décrire les 4 côtés d'un coup :

margin: 2px 1px 3px 4px; (marge haute, droite, bas, gauche)

width: 350px;
margin: auto; pour calculer automatiquement les marges, marche obligatoirement avec width

Dans le cadre d'un texte qui dépasse les marges d'un cadre ; (trop de texte)
p
{
	width: 350px;
	overflow: visible; (le texte dépasse du bloc)
	overflow: hidden; (le texte est coupé)
	overflow: scroll;(le script crée une barre de défilement pour lire le texte coupé)
	overflow: auto (le script choisit quoi faire (best?))
}

Lors d'une saisie d'une URL on peut avoir des débordements, pour régler ça
p
{
	width: 350px;
	word-wrap: break-word;
}

pour avoir un retour à la ligne

------------------- AGENCEMENT DES BLOCKS

ASTUCES#####################""

Toujours avoir dans un block ou conteneur de bloack :

#conteneur
{ 
	display: flex;
	justify-content: xx; flex-start / flex-end / center / space-between / space-around / space-evently
	align-items :xx; flex-start / flex-end / center / baseline / stretch
	flex-direction: xx; row / row-revere / column / column-reverse
}

utiliser order:-1; par ex pour le repositionner dans un ordre chiffré
utiliser align-self: pour aligner un élément spécifique (et pas tout comme abec align-items)
utiliser align-contentxx; pour répartir le contenu flex-start / flex-end / center / space-between / space-around / space-evently
repartir les éléments sur plusieurs lignes : flex-wrap:xx; nowrap / wrap / wrap-reverse


combiner flex-direction et flex-wrap grâce à flew-flow:xx; row wrap / column wrap....
###########################

Il faut placer les propriétés dans le bloc conteneur (body ou autre)

Par défaut, les blocks se superposent dans l'ordre du code

Pour changer cela on utilise display et flex-direction, ex ;

#conteneur
{
	display: flex; /* les blocks sont désormais alignés horizontalement */
}


------------------- 
#conteneur
{
	display: flex; 
	flex-direction: column-reverse /* les blocks sont superposés comme au debut mais inversés */
}

------------------- 
#conteneur
{
	display: flex; 
	flex-direction: row-reverse /* les blocks sont alignés horizontalement mais inversés mais reste sur une ligne quand on rétrécit la page de navigation*/
}
------------------- 
#conteneur
{
	display: flex; 
	flex-direction: row-reverse; /* les blocks sont alignés horizontalement mais inversés */
	flex-wrap: wrap; /* les blocks sont mis à la ligne quand on rétrécit la page de navigation */
}

flex-wrap: nowrap; pas de retour à la ligne (par défaut)
flex-wrap: wrap-reverse; les éléments vont à la ligne en cas de réduction de la page de navigation, mais dans l'ordre inverse
------------------- 
#conteneur
{
	display: flex; 
	justify-content: flex-start; ou end ou center /* les blocks sont alignés horizontalement mais alignés sur la droite, la gauche ou centrés*/
}
------------------- 
#conteneur
{
	display: flex; 
	justify-content: space-between; ou space-around; /* les blocks sont alignés horizontalement avec des espaces entres,et aussi des espace sur les côtés avec around*/
}
------------------- 

#element_specifique
{
	display: flex; 
	justify-content: center; 
	align-self: flex-end /* aligner un seul bloc à la fin de la page */
}
------------------- 


On peut aussi aligner les items sur un axe secondaire (heigt à renseigner dans ce cas)

#conteneur
{
	display: flex; 
	justify-content: space-between;
	align-items: stretch;   /*modifier l'alignement sur l'axe secondaire */
	height: 200px
}

options de align-items ;
stretch : éléments étirés sur tout l'axe (par défaut)
flex-start; éléments alignés au début
flex-end; éléments alignés à la fin
center ; alignés au centre
baseline ; alignés sur une ligne de base, similaire à flex-start

------------------- 
On peut aussi aligner les items horizontalement ET verticalement via margin auto ;

dans un conteneur ;
.element_cible
{
	margin: auto;
}

------------------- 
Si les blocks sont alignés en plusieurs lignes, on peut choisir comment elles sont agencées (dans le conteneur principal)

#conteneur
{
	display: flex; 
	flex-wrap: wrap;
	align-content: center; 
	height: 200px
}

options de align-content ;
flex-start; éléments placés au debut
flex-end; éléments placés à la fin
center : éléments placés au centre
space-between : éléments séparés avec des espaces entre eux
space-between: éléments séparés avec des espaces entre eux et à la fin
stretch (par défaut) : éléments étirés pour occuper tout l'espace

------------------- 
On peut aussi réorganiser les éléments malgré leur position dans le code :

via commande order, ex pour mettre à 3ème position :

.element_cible
{
	order: 3;
}

via commande nth-child et order ;

.element:nth-child(1) /* 1er élement de la classe visée */
{
	order: 2;
}


.element:nth-child(2) /* 2ème élement de la classe visée */
{
	order: 1;
}

------------------- 

Faire grossir ou maigrir un élément ;

.element:nth-child(1) /* 1er élement de la classe visée */
{
	order: 2;
	flex: 1;
}


.element:nth-child(2) /* 2ème élement de la classe visée */
{
	order: 1;
	flex: 2;
}


l'élément avec flex 2 sera 2 fois + gros que le flex 1

--------------------------------------------- elements dynamique CSS

changer la couleur d'un lien survolé par la souris et ajouter gras ;

a:hover
{
	color;green;
	font-weight: bold;
}

-------------------
ajouter une bordure au survol d'un élément par la souris ;

p:hover
{
	border-left: 3px solid black;
}
-------------------

Changer la couleur d'un clien après le CLIC dessus ;

a:activate
{
	color;green;
}

-------------------

Mettre en valeur l'élément sélectionné (utile pour les champs de formulaire)

a:focus
{
	background-color: #77FF88;
}

-------------------

Changer la couleur des liens déjà visités ;

a:visited
{
	color;green;
}


----------------- POSITIONS RELATIVE / RELATIVE ABSOLUTE

Marche avec un block parent (relative) et un bloc"enfant" (absolute) dans un même ensemble conteneur

la position:relative; permet de placer un élément comme l'on veut dans la page,
et la position:absolute; permet de placer un élément enfant par rapport au block parent

ex, placer un block bouton au milieu au block image (NE PAS OUBLIER TRANSFORM POUR BIEN CENTRER) :

.block_parent
{
	position:relative;
}


.block_bouton
{
	font-size:48px;
	color:blue;
	position:absolute;
	top:50%;
	left:50;
	transform:translate(-50%, -50%);
}


######################## SCRIPTS CSS

##################### BANNIERE


/* Bannière */

#banniere_image
{
    margin-top: 15px;
    height: 200px;
    border-radius: 5px;
    background: url('images/sanfrancisco.jpg') no-repeat;
    position: relative;
    box-shadow: 0px 4px 4px #1c1a19;
    margin-bottom: 25px;
}

#banniere_description
{
    position: absolute;
    bottom: 0;
    border-radius: 0px 0px 5px 5px;
    width: 99.5%;
    height: 33px;
    padding-top: 15px;
    padding-left: 4px;
    background-color: rgba(24,24,24,0.8);
    color: white;
    font-size: 0.8em;
   
}

.bouton_rouge
{
    height: 25px;
    position: absolute;
    right: 5px;
    bottom: 5px;
    background: url('images/fond_degraderouge.png') repeat-x;
    border: 1px solid #760001;
    border-radius: 5px;
    font-size: 1.2em;
    text-align: center;
    padding: 3px 8px 0px 8px;
    color: white;
    text-decoration: none;
}

.bouton_rouge img
{
    border: 0;
}

#########################################

POLICES :

/* Définition des polices personnalisées */

@font-face
{
    font-family: 'BallparkWeiner';
    src: url('polices/ballpark.eot');
    src: url('polices/ballpark.eot?#iefix') format('embedded-opentype'),
         url('polices/ballpark.woff') format('woff'),
         url('polices/ballpark.ttf') format('truetype'),
         url('polices/ballpark.svg#BallparkWeiner') format('svg');
    font-weight: normal;
    font-style: normal;
}

@font-face
{
    font-family: 'Dayrom';
    src: url('polices/dayrom.eot');
    src: url('polices/dayrom.eot?#iefix') format('embedded-opentype'),
         url('polices/dayrom.woff') format('woff'),
         url('polices/dayrom.ttf') format('truetype'),
         url('polices/dayrom.svg#Dayrom') format('svg');
    font-weight: normal;
    font-style: normal;
}

****************************************************************************************************
****************************************************************************************************
****************************************************************************************************

REACT

Besoin de composants de base pour fonctionner,

Sinon, utiliser codesandbox.io pour avoir un IDE en version web déjà compatible

Un dossier front end REACT comprend :
un dossier public (fichier html)
un dossier source (avec fichier js et fichier css)



****************************************************************************************************
****************************************************************************************************
****************************************************************************************************



****************************************************************************************************
****************************************************************************************************
****************************************************************************************************

Langage Python sous windows :

0°) Ne pas hésiter à utiliser la fonction help() 

1°) Toujours commencer son script en définissant l'encodage
#coding:utf-8

2°) Compiler un programme pour lancement via terminal :

- se placer dans le dossier où est le script

- taper : python script.py (ou autre nom de fichier)

3°) Les types standards pour les variables :

int : entier numérique
float : nombre flottant
str : chaine de caractère (string)
bool : booléen (binaire, oui / non, 0/1, ...)

ex :

agePersonne = 14
prixHT = 120.3
agePersonne2 ="25"
continuerPartie = True (ne pas oublier majuscule, pareil pour False)

********************************************************************* Les fonctions de base

print() : afficher à l'écran
input() : lire au clavier
type() : afficher le type d'une donnée, variable, ...
str.format() : formater une chaine

---------

afficher phrase à l'écran
print("Hello world") 

---------

afficher le contenu d'une variable
print("L'age de la personne est :", agePersonne)

--------- 

afficher des variables dans un texte écrit ;

texte = "L'age de la personne est {} et le prix HT est de {} euros."
print(texte.format(agePersonne, prixHT))

ou

print("L'age de la personne est {} et le prix HT est de {} euros.".format(agePersonne, prixHT))

---------

Réaliser une saisie via clavier, inclut dans une fonction 

nomJoueur = input ("Choisissez un nom de joueur :")

print("Bienvenue", nomJoueur)

---------

prixHT = input("Entrez un prix HT :")
prixHT = int(prixHT)                     //important de "caster" la variable car sinon elle n'est pas interprétée en entier mais en texte donc la fonction ne marche pas

prixTTC = prixHT + (prixHT * 20 / 100)

print("prix TTC = ", prix TTC)

********************************************************************* pré-caster variables  : mypy
ex : 

def greetings(name: str) -> str:                        #la variable est nom, c'est un string, la fonction renvoit un string (->)
	return "Hello" + name

def add_numbers(a:int, b:int, c:int) -> int:    #la fonction demande 3 int, et renvoie un int
	print(a + b + c)

ex 2 avec variable dans code :

x: int = 1

ces ajouts sont seulement des "commentaires" mais ne forcent pas que les variable ou function respectent les types

pour cela, il faut installer mypy : pip install mypy

comme ça, les erreurs seront relevées

A SAVOIR : si la function ne renvoit rien, taper -> None par ex :

def greetings(name: str) -> None:    
	return "Hello" + name

si on veut accepter une séquence (liste, tuple, ou autre sans vouloir spécifier mais en spécifiant le contenu)

x: sequence[str]    # accepter n'importe quelle séquence qui contient des str

pour les tuples

x: tuple = (1,2,3)

ou spécifier pour chaque variable du tuple
x: tuple[int, int, int] = (1,2,3)

pour les callable (comme une fonction)

voir docu : https://docs.python.org/3/library/typing.html

pour rappel, existant : (int / str / list / dict / bool / float / ...) 

liste ex : 
x: dict[str, str] = {"a":"b"}


********************************************************************* Les opérateurs

+ (addition)
- (soustraction)
* (multiplication)
/ (division) -> 5 /2 = 2
% (modulo) -> 5 % 2 = 1 (le reste non détaillé de la division)

Incrémenter une variable, avec version simplifiée ;

variable = variable + X
variable += X

ou

variable = variable - X
variable -= X

ou

variable = variable * X
variable *= X

Opérateurs de comparaison 

== (égal à)
=! (différent de)
< (plus petit que)
<= (plus petit ou égal à)
> (plus grand que)
>= (plus grand ou égal à)

********************************************************************* Les conditions

On n'oublie pas de finir les lignes de fonctions avec un :

and (ET) il faut que toutes les conditions soient respectées
or (OU)
in / not in (DANS / HORS DE)
if (SI), toujours finir la ligne de commande if par :
else
elif (sinon si)
while (tant que)
continue (continuer boucle si condition respectée par ex)
break (sortir de la boucle)
for (pour chaque composant) ou ANY
def (définition d'une fonction), return (retour d'une fonction)
lambda (création d'une fonction à une seule instruction)
try / except / else (gestion des erreurs)
raise (créer un type d'erreur sous conditions)
assert (vérifier une condition, si non respecté, crée une erreur d'assertion)

Exemple utilisation du if avec and ;

identifiant = "ludo"
mdp = "1234"

print("interface de connexion"

champ_utilisateur = input("Saisissez votre identifiant :")
champ_mdp = input("Saisissez votre mot de passe :")

if champ_utilisateur == identifiant and champ_mdp == mdp:
	print("vous êtes connecté, bienvenue", champ_utilisateur)

print(Je ne suis plus dans le if)

-----------------

autres exemples avec not in / not in / if / else / elif

lettre_hasard = "b"

if lettre_hasard not in "aeiouy":
	print("C'est une consonne")

-----------------

lettre_hasard = "i"

if lettre_hasard in "aeiouy":
	print("C'est une voyelle")
else:
	print("C'est une consonne")

-----------------

age == 24

if age == 18:
	print("tu es majeur de cette année")
elif age == 50:
	print("Tu viens d'avoir 50 ans")
elif age == 60:
	print("Tu viens d'avoir 60 ans")
else:
	print("Tu as", age, "ans")

on peut enchainer les elif

-----------------

statut_jeu = True

if statut_jeu:
	print ("Le jeu est en marche")
else:
	print("Le jeu est à l'arrêt")

Dans cette condition sur booléen on peut voir que le if va vérifier binairement (True = 1 = oui ou False = 0 = non) sans besoin de spécifier ce qu'il doit vérifier 

-----------------

if 0 < age <= 100:
	print("tu as un siècle maximum")

-----------------

#coding:utf-8


phrase = "je suis une phrase"

compteur_phrase = 0

while compteur_phrase < 20:
	compteur_phrase +=1
	print(phrase)

print("je suis sorti de la boucle")

-----------------

statut_jeu = True

while statut_jeu:
	choix_menu = input("quiiter ou rester")

("le jeu tourne")

print("A bientôt")

-----------------

Petit code sur boucle, avec continuation de boucle (continue) et sortie de boucle (break)

Toujours faire très attention à l'indentation !!

#coding:utf-8

statut_jeu = True

while statut_jeu:
	choix_joueur = input("Que veux-tu faire désormais? \n Continuer / Quitter ?")
	if choix_joueur == "Continuer":
		print("On continue !")
		continue
	elif choix_joueur == "Quitter":
		print("Au revoir !")
		break

print("sortie de boucle")

-----------------

La fonction for permet de lire séparément chaque composante d'une variable

ici la fonction fort va donc disséquer la phrase et afficher chaque caractère

#coding:utf-8

phrase = "akkzvzzeazkevazek"

for i in phrase:
	print(i)

on peut aussi utiliser ANY pour boucler sur une condition :

numbers = [-1, -2, 1, 4, 9]
has_positives = any(n > 0 for n in numbers)

********************************************************************* Création d'une fonction

def dire_bonjour():
	print("Bonjour tout le monde")

dire_bonjour()

Dans un premier temps on définit la fonction dire bonjour, puis on peut l'appeler 

-----------------
ex :Fonction de dialogue

def dire(nom_personne, message_personne):
	print("{} : {}".format(nom_personne, message_personne))

dire("Jason", "Bonjour à tous")
dire("Tom", "salut ça va?")

On peut répéter les arguments dans les fonctions dire d'appel si on veut changer l'ordre, ou autre
Les appels de fonction avec variables modifiées écrasent les variables définies de base (si définies)

-----------------
ex : fonction d'affichage d'inventaire (variable extensible)

def show_inventory(*list_items):   // le * permet d'indiquer que le contenu de la variable est extensible (infini)
	for item in list-items:
		print(item)

show_inventory("épée")
show_inventory("épée", "arc", "potion de mana", "cape")

-----------------
création de fonction avec retour de fonction (return)

def calculer_sommes(nombre1, nombre2):
	resultat = nombre1 + nombre2
	return resultat

print(calculer_sommes(5, 16))

ou

def calculer_sommes(nombre1, nombre2):
	return nombre1 + nombre2

print(calculer_sommes(5, 16))

-----------------
les fonctions lambda : permet de créer rapidement une fonction simple qui ne contient qu'une seule instruction (lambda est un mot réservé)

ttc = lambda prixHT:prixHT + (PrixHT * 20 / 100)

print(ttc(24))

autre exemple 

calculer = lambda a, b : a + b
print(calculer(14, 27))


************************* module OS

créer une condition si un module existe :

import os 

if(os.path.exists("fichier_cherché.txt")):
	pass



********************************************************************* Les modules
les manières d'importer un module : 

import nomdumodule
from nomdumodule import nomdefonction
from nomdumodule import *      // permet d'importer tout le module
			
#coding:utf-8

from maths import sqrt // permet d'importer une seule fonction d'un module (sqrt est la fonction racine carrée du module math)
resultat = sqrt(100)

ou encore 

import math
resultat = math.sqrt(100)

IMPORTANT =============================

en cas de problème d'import, utiliser sys pour faciliter les imports en cas de blocage ; 

import sys

sys.path.append("..")

-----------------

On peut également créer un module soi même :

1°) Créer le fichier du module (finit en .py) avec les fonctions aurevoir et parler, dans le même dossier !

par ex : player.py

2°) Dans le fichier de base, qui va importer le module et appeler les fonction ;

import player

player.aurevoir ()
player.parler ()

ou 

from player import aurevoir // importer qu'une seule fonction d'un module

3°) Python va créer une version cache du fichier dans le dossier afin d'optimiser le lancement et son utilisation

IMPORTANT : Si le fichier de module n'est pas dans le même dossier, il faut retracer le chemin que doit opérer le fichier main pour atteindre le fichier du module

ex : si le fichier est dans un sous dossier appelé includes

import includes.player as player

********************************************************************* Gestion des erreurs

Les fonctions try, except et else permettent de tester une fonction, indiquer l'action en cas d'exception, indiquer la continuité en cas de bonne exécution

Dans l'exemple ci-dessous, l'enjeu est que l'on vérifie que la saisie est un entier permettant d'afficher son âge, sinon le programme affichera une alerte


#coding:utf-8

ageUtilisateur = input("Quel âge as-tu?")

try:
	ageUtilisateur = int(ageUtilisateur)
except:
	print("L'âge indiqué est incorrect")
else:
	print("Tu as", ageUtilisateur, "ans")
finally:
	print("FIN DU PROGRAMME")

-----------------

Gestion des erreurs par type d'erreur possible :

ValueError
NameError
TypeError
ZeroDivisionError
OSError
AssertionError
KeyError (en dictionnaire)

exemple ;

#coding:utf-8

nombre1 = 150

nombre2 = input("Choisir un nombre pour diviser :")

try:
	nombre2 = int(nombre2)
	print("Résultat = {}".format(nombre1 / nombre2))
except ZeroDivisionError:
	print("Vous ne pouvez pas diviser par zéro")
except ValueError:
	print("Vous devez entrer un nomnbre")
except: 
	print("Valeur incorrecte")

-----------------

On peut aussi créer ses propres exceptions via la fonction raise

#coding:utf-8

Objets_inventaire = input("Combien d'objets as-tu?")
Objets_inventaire = int(Objets_inventaire)

if Objets_inventaire > 25:
	raise InventaireTropChargé("Allège ton inventaire")

-----------------

Exemple avec assertion : le but est de vérifier une condition via assert, (j'exige que.. sinon je déclenche une alerte d'erreur d'assertion)

#coding:utf-8

try:
	age = input("Quel âge as-tu?")
	age = int(age)

	assert age > 25
except AssertionError:
	print("Condition non validée")

********************************************************************* La programmation orientée objet (POO)

classe : plan de conceptionn (ex : humain)
objet : instance d'une classe (ex : Julien est un objet de classe Humain)
attribut : variable de classe (ex : prénom, age, taille, ...)

-----------------

ex :

#coding:utf-8

class RaceHumaine:                   //création de la classe

	def __init__(self):              //self renvoie à ce qui définit la classe, renvoie également à l'objet créé               
		print("Création d'un humain", self) // renvoie à ce qui définit l'objet

print("Lancement du programme de création")

HumainNumero1 = RaceHumaine()           //Création d'une instance de classe RaceHumaine
HumainNumero2 = RaceHumaine() 


A chaque création d'un objet, la classe compile l'objet et lui génère une addresse unique (qu'on retrouve via self dans le print de l'exemple ci-dessus)

-----------------

Définition d'attributs généraux sur l'objet et d'attributs spécifiques sur deux objets

#coding:utf-8

class RaceHumaine:

	def __init__(self, prenom_humain, age_humain):
		print("Création d'un humain")
		self.prenom = prenom_humain
		self.age = age_humain

print("Lancement du programme de création")

HumainNumero1 = RaceHumaine("Romain", 34)
print("Prénom du premier humain : {}".format(HumainNumero1.prenom))
print("Âge du premier humain : {}".format(HumainNumero1.age))

HumainNumero2 = RaceHumaine("Albert", 50)
print("Prénom du deuxième humain : {}".format(HumainNumero2.prenom))
print("Âge du deuxième humain : {}".format(HumainNumero2.age))

-----------------

Définition d'un attribut de classe (compteur d'instances de la classe racehumaine)

#coding:utf-8

class RaceHumaine:

	nombre_humains = 0

	def __init__(self, prenom_humain, age_humain):
		print("Création d'un humain")
		self.prenom = prenom_humain
		self.age = age_humain
		RaceHumaine.nombre_humains +=1

print("Lancement du programme de création")

HumainNumero1 = RaceHumaine("Romain", 34)
print("Je suis {}, l'humain numéro {}".format(HumainNumero1.prenom, RaceHumaine.nombre_humains))

HumainNumero2 = RaceHumaine("Albert", 50)
print("Je suis {}, l'humain numéro {}".format(HumainNumero2.prenom, RaceHumaine.nombre_humains))

********************************************************************* Les méthodes

il y a les méthodes d'instance (fonction sur objet) : self 
les méthodes de classe (fonction sur classe) : cls
les méthodes statique (fonction indépendante mais lié à une classe)

-----------------

ajouter des méthodes à un objet : une méthode est une fonction d'un objet;

#coding:utf-8

class RaceHumaine:

	def __init__(self, prenom, age):
		self.prenom = prenom
		self.age = age


	def parler(self, message):
		print("{} a dit : {}".format(self.prenom, message))


HumainNumero1 = RaceHumaine("Toto", 34)

HumainNumero1.parler("bonjour !")

-----------------

ajouter des méthodes de classe :

Pour changer l'attribut d'une classe, il faut utiliser une méthode de classe via ;

1°) la construction d'une fonction qui utilise le mot cls en attribut (au lieu de self pour un objet)

2°) La construction d'une classmethod après avoir définit la fonction (la fonction de classe aka methode de classe)

3°) Attention à l'indentation (et au :)

#coding:utf-8

class RaceHumaine:

	lieu_habitation = "Terre"

	def __init__(self, prenom, age):
		self.prenom = prenom
		self.age = age


	def parler(self, message):
		print("{} a dit : {}".format(self.prenom, message))

	def changer_planete(cls, nouvelle_planete):
		RaceHumaine.lieu_habitation = nouvelle_planete

	changer_planete_cm = classmethod(changer_planete)


HumainNumero1 = RaceHumaine("Toto", 34)

HumainNumero1.parler("bonjour !")

print("Planète actuelle : {}".format(RaceHumaine.lieu_habitation))

HumainNumero1.changer_planete_cm("Mars")

print("Planète actuelle : {}".format(RaceHumaine.lieu_habitation))

-----------------

ajouter une méthode statique (indépendante)

#coding:utf-8

class RaceHumaine:

	lieu_habitation = "Terre"

	def __init__(self, prenom, age):
		self.prenom = prenom
		self.age = age


	def parler(self, message):
		print("{} a dit : {}".format(self.prenom, message))

	def changer_planete(cls, nouvelle_planete):
		RaceHumaine.lieu_habitation = nouvelle_planete

	changer_planete_cm = classmethod(changer_planete)

	def definition():
		print("L'humain est un etre qui vit dans de nombreux univers")

	definition = staticmethod(definition)

RaceHumaine.definition()



********************************************************************* Les propriétés d'encapsulation

Sert par exemple à vérifier des conditions de validités d'un attribut spécifique

Permet de "saucissonner" une methode pour appliquer des propriétés, ou pour vérifier que la modification d'un attribut respecte des règles

les propriétés existantes ;

property
(getter) : obtenir une variable
(setter) : définir / redéfinir une variable
(deleter) : supprimer une variable
(helper) : afficher les commentaires écrits et les fondamentaux d'une classe

Les propriétés sont identifiées grâce au signe _ devant l'attribut visé par la propriété

C'est une forme de déclinaison de l'attribut visé qui permet de lui assigner des règles ou autre

-----------------

#coding:utf-8

class RaceHumaine:


	def __init__(self, prenom, age):
		self.prenom = prenom
		self._age = age

	def _getage(self):
		try:
			return self._age
		except AttributeError:
			print("L'âge a été supprimé")

	def _setage(self, nouvel_age):
		if nouvel_age < 0:
			self._age = 0
		else:
			self._age = nouvel_age

	def _delage(self):
		del self._age

	age = property(_getage, _setage, _delage)



HumainNumero1 = RaceHumaine("Toto", 28)

print(HumainNumero1.age)

del HumainNumero1.age

print(HumainNumero1.age)


********************************************************************* L'héritage

fonctions utiles (renvoie des booleen True / False) :
Vérifier qu'un objet est de la classe renseignée ;
print(isinstance(twingo, Vehicule)) - la fonction de base de vérification est isinstance(twingo, Vehicule)
Verifier qu'une classe enfant hérite bien de la classe parente :
issubclass(Voiture, Vehicule)


L'héritage permet de donner à une classe d'objet, les fonctions et attributs d'une classe parente (ex Vehicule -> Voiture)

La classe enfant récupère donc les attributs et fonction de la classe parente mais peut en posséder encore davantage

On peut avoir plusieurs classes mère pour une classe enfant 

-----------------

#coding:utf-8

# Definition de la classe mère

class Vehicule:
	def __init_(self, modele, carburant):
		self.modele = modele
		self.carburant = carburant

	def se_deplacer(self):
		print("Le vehicule {} se déplace".format(self.modele))

# Definition d'une classe fille : voiture dans vehicule

# Bien penser à récupérer le constructeur de la classe mère (double __init__)

class Voiture(Vehicule):
	def __init__(self, modele, carburant, puissance):
		Vehicule.__init__(Voiture)
		self.modele = modele
		self.carburant = carburant
		self.puissance = puissance


# Programme principal

twingo = Voiture("Twingo 1.2L", 90, 420)
print("La voiture est une {}".format(twingo.modele))

twingo.se_deplacer()

print(isinstance(twingo, Voiture))

print(issubclass(Voiture, Vehicule))

********************************************************************* Les chaînes de caractères

Les chaînes de caractères est une fonction complète, ne pas hésiter à faire help(str)

TRES IMPORTANT : Une méthode de chaine (fonction de chaine), travaille sur une copie et pas sur l'original, c'est une copie qui est renvoyé
On le voit via l'exemple ci-dessous ;

-----------------

#coding:utf-8

# transformer en MAJ la chaine de caractères
# ma_chaine = ma_chaine.upper()

# transformer en MIN la chaine de caractères
# ma_chaine = ma_chaine.lower()

# mettre MAJ au début de la phrase
# ma_chaine = ma_chaine.capitalize()

# mettre MAJ à chaque début de mot
# ma_chaine = ma_chaine.title()

# Décaler la phrase de X espaces (déduit de la longeur de la phrase actuelle), et remplir les espaces avec le caractère Y  (peut etre vide)
# ma_chaine = ma_chaine.center(50,"-")

# Chercher dans la phrase, les caractères renseignés via la fonction find
# print(ma_chaine.find("Hello"))
# Dans l'exemple ci-dessous il va retourner 18, car c'est à partir du caractère 18 qu'il trouve les caractères cherchés
# En cas d'erreur, il va renvoyer -1

# Chercher dans la phrase, les caractères renseignés via la fonction index
# print(ma_chaine.index("Hello"))
# Retourne comme find
# Mais en cas d'erreur il renvoie une value Error, il faut donc le combiner à une fonction try/except

# On peut aussi utiliser if "xx" in str: pour chercher des caractères

# Enlever tous les espaces d'une saisie
# print(ma_chaine.strip())

# Remplacer plusieurs ou tous les caractères renseignés d'un str (chaine de caractère)
# ma_chaine = ma_chaine.replace("caractereARemplacer", "caractèreUtilisépourRemplacer", Nbdoccurence)
# ex : ma_chaine = ma_chaine.replace("o", "z", 2) laisser vide au lieu de 2 pour remplacer tous les o


# Transformer une phrase en liste via fonction split
# phrase = "Magicien|10|5"
# print(phrase.split("|"))
# Il faut indiquer entre parenthèses ce qui fait office de séparateur, ici |

# Autres fonctions disponibles en booléen
# maphrase.isalpha(), maphrase.isdigit(), maphrase.isdecimal(), maphrase.isidentifier()
# maphrase.isnumeric(), maphrase.islower(), maphrase.isupper(), maphrase.isalphanum()
# par ex identifier permet de savoir is le mot visé est reservé

ma_chaine = "Hello world ! "
ma_chaine2 = ma_chaine

print(ma_chaine)
print(ma_chaine2)

ma_chaine = ma_chaine.center(50, "-")

print(ma_chaine)
print(ma_chaine2)

print(ma_chaine.find("Hello"))

print(ma_chaine.index("Hello"))


********************************************************************* Les listes

Créer une liste vide, ex :

inventaire = []

-----------------

Afficher le nombre d'éléments dans une liste : fonction len()

print(len(inventaire))


-----------------

Créer une "bande" de nombre :

inventaire = range(20)  // va créer une liste de 0 à 19, donc une liste de 20 éléments, une liste commence toujours par un "élément zéro"

-----------------

Parcourir une liste en l'affichant dans sa totalité, ex :

for valeur in inventaire:
	print(valeur)

-----------------

On peut aussi créer une liste en dupliquant le point d'entrée, par exemple pour une liste qui contient 5 fois le chiffre 10 ;

inventaire = [10] * 5

-----------------

Afficher un élément précis d'une liste :

print(inventaire[1])  // affiche le deuxième élément de la liste inventaire (car le premier est 0)

-----------------

Afficher tous les éléments d'une liste :

print(inventaire[:]) 

-----------------

Afficher des éléments AVANT un élément précis d'une liste :

print(inventaire[:2])  // affiche les deux premiers elements d'une liste

-----------------

Afficher des éléments APRES un élément précis d'une liste :

print(inventaire[2:])  //affiche TOUS les éléments après les deux premiers de la liste

-----------------

Afficher les derniers éléments d'une liste :

print(inventaire[-2]) //affiche les deux derniers éléments d'une liste

-----------------

Afficher des éléments dans un range précis :

print(inventaire[2:5]) //affiche l'éléments du 3ème au 5ème (décalage à cause 0) - donc 3éléments affichés

-----------------

Modifier un élément directement dans la liste (fonction d'écrasement)

inventaire[2]= "Bouclier d'acier"  // le 3ème élément sera écrasé et s'appelera bouclier d'acier

-----------------

S'assurer de la présence d'un élément dans la liste

if xx in inventaire:
	print("présent")
else:
	print("absent")

-----------------

Ajouter un élément dans une liste via append (va ajouter à la fin)

inventaire = []   //création d'une liste
inventaire.append("Arc")

-----------------

Insérer un élément dans une liste (avec le choix de la position)

liste.insert(position_element, element_inséré)

ex :

inventaire.insert(1, "Potion de mana") // va devenir le deuxième élément de la liste (à cause du zéro élément) et décaler les autres

-----------------

Enlever / supprimer un élément d'une liste

liste.remove("bouclier")

ou

del inventaire[1]  // supprimer l'élément visé

-----------------

Trouver l'index d'un élément connu:

inventaire.index("Bouclier")

-----------------

Trier dans un ordre croissant / alphabétique (marche sur les éléments de même type d'une liste)

inventaire.sort()

-----------------

Inverser une liste de valeur (pas décroissant !)

inventaire.reverse()

existe aussi en fonction pour inverser dans une boucle le sens de traitement d'une liste :

lettres = ["a", "b", "c", "d"]

for lettre in reversed(lettres):
	print(lettre)
-----------------

Effacer une liste (vider la liste)

inventaire.clear()

-----------------

Créer une liste depuis une chaine :

chaine = "Bonjour à tous"
chaine = chaine.split(" ")    // permet d'utiliser l'espace indiqué par " " comme le critère qui permet de segmenter la chaine en liste (donc 3 mots séparés)

Créer une chaîne depuis une liste :

chaine = ["Bonjour", "à" , "tous"]
liste = " ".join(chaine)      // va utiliser l'espace pour segmenter la liste, si on avait utilisé "_" on aurait Bonjour_à_tous en résultat


-----------------

Créer une copie indépendante d'une liste

import copy      // importer module de base

liste1 = range[20]
liste2 = copy.deepcopy(liste1)

-----------------

Concaténer deux listes (non dynamique) :

Ajouter une liste 2 à une liste 1

liste1.extend(liste2)

ou

liste1 = liste1 + liste2

ou 

liste1 += liste2

-----------------

Afficher la position de l'élément dans la liste et son contenu ; fonction enumerate()

inventaire = ["Arc", "Epée", "Bouclier", "Potion"]

for objet in enumerate(inventaire):
	print(objet)




********************************************************************* Les conteneurs (tuples)*

La différence entre les listes et les conteneurs ; les conteneurs ne peuvent pas être modifiés

Sert à créer des constantes (conteneur immeuble)

-----------------

Pour créer un tuple, ex :

mon_tuple = ()    // pour rappel, les listes sont elles créées avec []

-----------------


Pour créer un tuple avec une seule valeur, il faut mettre une virgule, ex ;

mon_tuple = (45,)

print(type(mon_tuple))

-----------------
Stockage d'un tuple en fonction et appel du tuple ;

def get_player_position():
	posX = 360
	posY = 120
	
	return (posX, posY)      // définition du tuple via ()


# programme principal

coordX = 0
coordY = 0

print("Position du joueur : {}/{}".format(coordX, coordY))

(coordX, coordY)) = get_player_position()

print("Position du joueur : {}/{}".format(coordX, coordY))

# Dans cet exemple, on peut modifier les variables coordXY, mais pas les tuple de base de la fonction

####

découper un tuple suivant son contenu :

point = (0, 6)
x, y = point 
print(x)
print(y)

il faut un nombre de variable égale à celui présent dans le tuple

### on peut aussi creer une sous liste dans le découpage d'un tuple 

profil = ("john", "doe", "028373748484, "134949449")
prenom, nom, *numeros = profil

dans ce cas, le * permet de créer une liste de tout ce qui vient après


********************************************************************* Les dictionnaires (ressemble aux tableaux associatifs)

Les dictionnaires peuvent être modifiés. Ne pas hésiter à utiliser help(dict)

-----------------

Créer un dictionnaire, ex :

Dico = {}  // pour une liste c'est [], pour un tuple c'est ()

-----------------

Un dictionnaire associe une clé à une ou plusieurs valeurs, ex :

dico = {clé:valeur, clé2:valeur, ...}

dico = {"prénom":"Toto"}

-----------------

pour imprimer la valeur, utiliser la clé, ex ;

print(dico["prénom"])

-----------------

Ajouter/modification d'un élément dans le dictionnaire existant, ex :

dico[clé]= nouvelle_valeur

dico["pseudo"] = "Couscous"

Si l'élément n'existe pas il sera créé, sinon il remplaçera l'existant
--

OU via UPDATE, ex :

d1 = {"un":1, "deux":2}

d1.update( {"un":2, "deux":1} )

-----------------

Suppression d'un élément, depuis la clé, via la fonction po, ex ;

dico.pop("pseudo")

Sert aussi à récupérer ce qui a été supprimé via pop

ou

utiliser del dico["pseudo"]

-----------------

Afficher toutes les clés d'un dictionnaire :

for cle in dico.keys():
	print(key)

-----------------

Afficher toutes les valeurs d'un dictionnaire :

for valeurs in dico.values():
	print(valeurs)


----------------------
récupérer valeur d'une clé

d1 = {"un":1, "deux":2}

d1.get("un")

-------------

chercher une clé spécifique sans lever d'erreur si inexistante :

my_dict = {"item":"football", "price":10.00}
count = my_dict.get("price", 0)    # chercher valeur de price, si inexistant, afficher 0, sans le zéro la requete renvoie None

définir une valeur par défaut si la recherche d'une clé spécifique n'aboutit pas

count = my_dict.setdefault("price", 0)

------------------------
fusionner des dictionnaires

d1 = {"name":"Alex", "age":20}
d2 = {"name":"Alex", "city":"New-York"}

merged_dict = {**d1, **d2}  OU merged_dict = d1 | d2

-----------------
Fonction avec paramètre nommés (permet de créer une fonction comme un dictionnaire, grâce à **), ex ;

Les paramètres renseignés sont nommés (ils ont une clé unique)

def maFonctionBizarre(**parametres):
	print(parametres)

maFonctionBizarre(p=54, nom="blabla")


-------------------- DICTIONNAIRES / JSON :

convertir un dictionnaire python en format json :

json.dumps(dico_a_convertir)

afficher le format json avec une indentation pour mieux lire 

json.dumps(dico_a_convertir, indent=2)

--------

convertir un format json en python (donc créer dictionnaire)

nouveau_dictionnaire_python = json.loads(json_a_convertir)

---------------

SERIALISER une classe python en dictionnaire : https://www.youtube.com/watch?v=Nnkbintgtms

1°) créer la classe et instancier l'objet

class Personne:
	def __init__(self, nom, age):
		self.nom = nom
		self.age = age

personne1 = Personne("Kirikou", 22)

2°) sérialiser l'objet en dictionnaire python

dicop1 = personne1.__dict__

3°) on peut aussi le serialiser pour le convertir en JSON :

dicojson = json.dumps(personne1.__dict__)

--------------------

SERIALISER une instanciation d'objet via dictionnaire JSON

1°) créer la classe 

class Personne:
	def __init__(self, nom, age):
		self.nom = nom
		self.age = age


2°) Instancier l'objet via critères non nommés

personne1json = {'nom':"toto", 'age':25}

personnefromjson = Personne(**json.loads(personne1json))


-----------------

----------------------- fonction pour caculer le temps d'execution, performance 

import time

def timing_with_time()
	start = time.perf_counter()
	time.sleep(1)
	end = time.perf_counter()
	print(end - start)


********************************************************************* Les décorateurs
calculer le temps d'éxecution d'une fonction
-------------------------
import time

def time_it(func)
	def wrapper(*args, **kwargs):
		start = time.time()
		result = func(*args, **kwargs)
		end = time.time()
		print(func.__name__ + "took" + str(end-start)*1000) + "mil sec")
		return result
	return wrapper

@time_it 
def fonction_a_decorer():
	pass

-------------------------
afficher le nb d'appel d'une fonction via une class
-------------------------

class Nb_appel:
	def __init__(self, f):
		self.appel =  0
		self.f = f
	def  __call__(self, *t, **d):
		self.appel = self.appel + 1
		s = f'{self.f__name__} : {self.appel} appels'
		print(s)
		return self.f(*t, **d)

@Nb_appel
def fonction_a_decorer():
	pass


-------------------------
autoriser ou non une action via décorateur
-------------------------

user_logged = True

def decorator(func):
	def wrapper():
		if user_logged:
			return func()
		else:
			print("vous devez vous connecter")
	return wrapper

@decorator
def profile()
	print("le profil membre est....)


-------------------------
créer un décorateur qui doit répondre à un critère
-------------------------

user_name = "Jason"

def check_user(username):
	def decorator(func):
		def wrapper():
			if user name == user_name:
				return func()
			else:
				print("utilsateur inconnu")
		return func
	return decorator


@check_user("jason")
def profile():
	print("le profil membre...")

---------------------------------- model basique fonction décorateur :

def decorate_function(function):
    """Cette fonction va générer le décorateur."""
 
    def wrapper():
        """Voici le "vrai" décorateur.
 
        C'est ici que l'on change la fonction de base
        en rajoutant des choses avant et après.
        """
        print("Do something at the start")
 
        result = function()
 
        print("Do something at the end")
 
        return result
 
    return wrapper
 
 
def travelling_through_the_stars():
    """Voyage à travers les étoiles."""
    print("C'est parti pour un long voyage !")
 
 
# ici, nous allons récupérer le retour de "decorate_function",
# qui n'est autre que la fonction "wrapper" !
# Notez que nous pouvons très bien renommer une fonction en
# l'assignant dans une nouvelle variable (ici "wrapper" devient "decorated").

decorated = decorate_function(travelling_through_the_stars)
decorated()  # nous executons la fonction "wrapper"


********************************************************************* Les fichiers

Permet d'ouvrir des fichiers pour lire et écrire, 

les commandes de base :
r (lecture seule: read(), readline(), readlines ()
w (écriture avec écrasement de l'existant : write)
a (écriture avec ajout en fin de fichier - append)
x (lecture et écriture)
r+ (lecture/écriture dans un même fichier)

-----------------

Ouvrir et fermer un fichier (nom du fichier : donnees, situé dans un sous-dossier nommé docs) et s'assurer qu'il est bien fermé

On créé le chemin du fichier à ouvrir par rapport à l'emplacement du fichier source

fichier = open("docs/donnees.txt", "r")
fichier.close()

if fichier.closed:
	print("Fichier fermé")
else:
	print("Fichier encore ouvert")

-----------------

Deuxième méthode pour ouvrir un fichier, réaliser les commandes et le fermer

with open("docs/donnees.txt", "r") as fichier:
	content = fichier.read()
	print(content)

# Pas besoin de fermer le fichier avec une commande grace à cette méthode

-----------------

Lire le contenu d'un fichier (fonction read)

fichier = open("docs/donnees.txt", "r")

print(fic.read())

fichier.close()

ou passer par une variable intermédiaire

fichier = open("docs/donnees.txt", "r")

contenu = fichier.read()

print(content)

fichier.close()

-----------------

Ecrasement du contenu d'un fichier (fonction write)

with open("docs/donnees.txt", "w") as fichier:
	fichier.write("J'écrase le contenu existant")

-----------------

Lire un contenu de fichier, en affichant ligne par ligne (fonction readline)

La fonction agit comme un curseur, et va donc se déplacer de ligne en ligne à chaque appel

Dans l'exemple ci-dessous on a donc 3 lignes qui s'affichent les unes après les autres (dans l'ordre)

fichier = open("docs/donnees.txt", "r")

line = fichier.readline()
print(line)

line = fichier.readline()
print(line)

line = fichier.readline()
print(line)

fichier.close()

-----------------

Lire un contenu de fichier, en affichant sous forme de liste // readlineS

fichier = open("docs/donnees.txt", "r")

line = fichier.readlines()
print(line)

fichier.close()

-----------------

Créer un fichier en binaire qui contient le code issu d'une methode de class, via le module pickle

import pickle

class Player:
	def __init__(self, name, lvl):
		self.name = name
		self.lvl = lvl
	
	def quisuisje(self):
		print("{} ({})".format(self.name, self.lvl))

player1 = PLayer("Jason", 10)

with open("player.data", "wb") as fichier:        // Faire attention a mettre b après la commande car on veut du BINAIRE
	record = pickle.Pickler(fichier)         //faire attention à la Maj sur Pickler
	record.dump(player1)                    //permet d'imprimer dans le fichier via la fonction créée (record est personnalisable)


-----------------

Lire un fichier en binaire suite à création via module pickle

import pickle

class Player:
	def __init__(self, name, lvl):
		self.name = name
		self.lvl = lvl
	
	def quisuisje(self):
		print("{} ({})".format(self.name, self.lvl))

player1 = PLayer("Jason", 10)

with open("player.data", "rb") as fichier:        //rb comme read BINAIRE
	get_record = pickle.Unpickler(fichier)   //faire attention à la Maj sur Unpickler
	player_one = get_record.load()          //permet de lire le fichier via la fonction créée (player one et get record est personnalisable)

player_one.quisuisje()

********************************************************************* API - lire les requetes web avec x.text et autres

apparent_encoding	Returns the apparent encoding
close()	Closes the connection to the server
content	Returns the content of the response, in bytes
cookies	Returns a CookieJar object with the cookies sent back from the server
elapsed	Returns a timedelta object with the time elapsed from sending the request to the arrival of the response
encoding	Returns the encoding used to decode r.text
headers	Returns a dictionary of response headers
history	Returns a list of response objects holding the history of request (url)
is_permanent_redirect	Returns True if the response is the permanent redirected url, otherwise False
is_redirect	Returns True if the response was redirected, otherwise False
iter_content()	Iterates over the response
iter_lines()	Iterates over the lines of the response
json()	Returns a JSON object of the result (if the result was written in JSON format, if not it raises an error)
links	Returns the header links
next	Returns a PreparedRequest object for the next request in a redirection
ok	Returns True if status_code is less than 400, otherwise False
raise_for_status()	If an error occur, this method returns a HTTPError object
reason	Returns a text corresponding to the status code
request	Returns the request object that requested this response
status_code	Returns a number that indicates the status (200 is OK, 404 is Not Found)
text	Returns the content of the response, in unicode
url	Returns the URL of the response

********************************************************************* Interface Graphique (Tkinter)

Pour importer l'ensemble du module tkinter, on peut écrire ; 

from tkinter import *

-----------------
L'architecture de base obligatoire ;

#coding:utf-8

import tkinter 

mainapp = tkinter.Tk()                      //attention à la MAJ de Tk // on peut écrire juste mainapp = Tk()  si on importe tout le module au début
mainapp.title("Mon premier GUI")           // écrire le titre de la fenetre d'interface

mainapp.mainloop()                        // a écrire pour garder la fenêtre ouverte en permanence (boucle)

-----------------
Les fonctions de base dans le GUI (avec MAJ en début de fonction) :

Button : créer un bouton
Entry : créer boite de saisie
Label : Afficher un message 
Checkbutton : afficher une tickbox
Radiobutton : créer un bouton rond (style sondage)
Scale : bouton glisseur comme sur une platine de musique
Spinbox : bouton compteur
Listbox : Liste d'éléments à selectionner

Fonctions messagebox de tkinter, fenetre modales (OS) :
showerror (fonctionne avec module messagebox de tkinter) : afficher fenetre erreur système
showinfo : idem que showerror mais avec fenetre bleue (moins aggressif)
showwarning : idem que les autres mais avec panneau jaune
askquestion : affiche question avec oui / non en réponse
askokcancel : affiche question avec OK /annuler en réponse
askyesno : affiche question avec oui / non en réponse
askretrycancel : affiche panneau avec question et recommencer/annuler

Les fonctions pour ajuster la fenêtre ;

mainapp.minsize(640, 490)      // permet de créer une fenetre de taille minimale (choisir chiffres)
mainapp.maxsize(1280, 720)    //permet de créer une fenetre de taille maximale (choisir chiffres)
mainapp.resizable(width=False, height=False)  // permet d'empecher d'augmenter ou non la largeur ou la hauteur de la fenetre
mainapp.geometry ("800x600") //permet d'afficher une taille de base de fenetre (redimensionnbale avec curseur)
mainapp.geometry ("800x600+50+100") // le +50+100 permet de décaler la fenetre en pixels par rapports aux bords d'écran

Les attributs de base  ;

width
height
show
command = fonction (permet d'appeler une fonction via boutton par exemple)

-----------------

 Code pour redimensionner proprement sa fenetre :

#coding:utf-8

import tkinter

mainapp = tkinter.Tk()
mainapp.title("GUI")

screen_x = int(mainapp.winfo_screenwidth())
screen_y = int(mainapp.winfo_screenheight())

windows_x = 800
windows_y = 600

posX = (screen_x // 2) - (windows_x // 2)
posY = (screen_y // 2) - (windows_y // 2)

geo = "{}x{}+{}+{}".format(windows_x, windows_y, posX, posY)
mainapp.geometry(geo)

mainapp.mainloop()

-----------------
Afficher un message sur le GUI, et écraser un contenu texte


#coding:utf-8

import tkinter

mainapp = tkinter.Tk()
mainapp.title("GUI")

affichage_hello = tkinter.Label(mainapp, text="Hello world !")    // attention au L en MAJ de Label : créer l'objet texte à afficher

affichage_hello.pack()                                           //permet d'afficher (équivalent print sur console)

affichage_hello.config(text="Nouveau message")                 //permet d'écraser l'ancien contenu de l'objet affiché via config.

mainapp.mainloop()

-----------------

Créer une boite de saisie dans le GUI 

#coding:utf-8

import tkinter

mainapp = tkinter.Tk()
mainapp.title("GUI")

boite_saisie = tkinter.Entry(mainapp)    //pour un mdp de passe, on pourrait écrire boite_saisie = tkinter.Entry(mainapp, show="*") pour que soit affichés des * à la place des lettres

boite_saisie.pack()

mainapp.mainloop()

-----------------

Créer un bouton dans le GUI

#coding:utf-8

import tkinter

mainapp = tkinter.Tk()
mainapp.title("GUI")

boutton = tkinter.Button(mainapp, text="Accepter")

boutton.pack()

mainapp.mainloop()

-----------------

Créer une tickbox dans le GUI avec fonction Checkbutton

#coding:utf-8

import tkinter

mainapp = tkinter.Tk()
mainapp.title("GUI")

tickbox = tkinter.Checkbutton(mainapp, text="Cocher la case")  // on peut ajouter un attribut, pour donner un "poids" à la tickbox, si décochée on a offvalue=X , si cochée on a onvalue=X)

tickbox.pack()

mainapp.mainloop()

-----------------

Créer une case ronde style sondage (Radiobutton)

Une seule case peut être cochée, ex ;

#coding:utf-8

import tkinter

mainapp = tkinter.Tk()
mainapp.title("GUI")

bouton_radioA = tkinter.Radiobutton(mainapp, text="Femme", value=1)  // les valeurs doivent être différentes
bouton_radioB = tkinter.Radiobutton(mainapp, text="Homme", value=0)

bouton_radioA.pack()
bouton_radioB.pack()

mainapp.mainloop()

-----------------

Créer un bouton d'echelle comme sur une platine

#coding:utf-8

import tkinter

mainapp = tkinter.Tk()
mainapp.title("GUI")
									// bien faire attention au _ au niveau du from
echelle = tkinter.Scale(mainapp, from_=0, to = 100, tickinterval = 25) //les attributs peuvent être supprimés pour garder un bouton "simple"

echelle.pack()

mainapp.mainloop()

-----------------

Créer une boite à compteur (avec touches sur le côté pour augmenter/baisser le compteur)

#coding:utf-8

import tkinter

mainapp = tkinter.Tk()
mainapp.title("GUI")

compteur = tkinter.Spinbox(mainapp, from_=1, to = 1000)   //veiller au _ du from

compteur.pack()

mainapp.mainloop()

-----------------

Créer une liste d'éléments à sélectionner, fonction Listbox :

#coding:utf-8

import tkinter

mainapp = tkinter.Tk()
mainapp.title("GUI")

liste = tkinter.Listbox(mainapp)

liste.insert(1, "Windows")
liste.insert(2, "Linux")
liste.insert(3, "MacOS")


liste.pack()

mainapp.mainloop()

-----------------

Générer une fenetre d'affichage OS suite à une action via module messagebox et sa fonction showerror

La fenêtre affiche un panneau rouge, on peut avoir le meme fonctionnement mais avec fenetre bleue (information, plus light visuellement mais sinon idem avec showinfo)

#coding:utf-8

import tkinter

from tkinter import messagebox   //Faire attention à bien importer le module

def affichage_message_erreur():
		messagebox.showerror("ERREUR", "Un problème est survenu !")  // création d'une fonction qui sera déclenchée lors du clic sur bouton, le ERREUR sera le titre, et le reste le corps de message 

mainapp = tkinter.Tk()
mainapp.title("GUI")

bouton_erreur = tkinter.Button(mainapp, text="Générateur d'erreurs", command=affichage_message_erreur)   // c'est l'attribut command qui permet le bind de l'action & de l'affichage erreur

bouton_erreur.pack()

mainapp.mainloop()

----------------- Variables de contrôle tkinter (observateur)

Créer une variable de type :    //Bien penser aux MAJ sur Var

StringVar() : chaîne de caractères
IntVar() : nombre entier
DoubleVar : nombre flottant (correspondant au type float)
BooleanVar() : booléen

ex, pour créer une variable qui va modifier un label



variable_label = tkinter.Stringvar()
label = tkinter.Label(mainapp, textvariable=var_label)
var_label.set("Coucou")

label.pack()

----------------- 

Redéfinir une variable :

variable.set("nouvelle_valeur")

----------------- 

Récupérer une variable

variable.get()

----------------- 

Créer un observateur (via fonction + trace), qui va permettre de générer une action quand une variable est modifiée ;

#coding:utf-8

import tkinter

# création observateur

def update_label(*args): //*args est un mot reservé pour affecter un ensemble de variables
	var_label.set(var_entry.get())     //permet de surveiller la variable redéfinie (var_label.set), et de récupérer le contenu de entry (get) quand var.label est changé

# Création du GUI

mainapp = tkinter.Tk()
mainapp.title("GUI")

# Widget 

var_entry = tkinter.StringVar()     // définit une variable où le conteny est une chaîne de caractères
var_entry.trace("w", update_label)                        // permet de tracer le changement de la variable entry, et on la connecte à la fonction définie au-dessus)
entry = tkinter.Entry(mainapp, textvariable=var_entry)  	//on utilise "w" pour réécrire, ou "r" pour lire

var_label = tkinter.StringVar()
label = tkinter.Label(mainapp, textvariable=var_label)

entry.pack
label.pack

# Boucle principale

mainapp.mainloop()

----------------- 

Créer un cadre à l'intérieur du GUI

#coding:utf-8

import tkinter

mainapp = tkinter.Tk()
mainapp.geometry("640x480")
mainapp.title("GUI")

mainframe = tkinter.LabelFrame(mainapp, text="Titre", width=300, height=200, borderwidth =1)   //créer la "boite" dans la boite (comme une sous boite)
mainframe.pack()


bouton = tkinter.Button(text="Hello world")       //Pour intégrer le widget dans la "sous boite" on peut écrire bouton = tkinter.Button(mainframe, text="Hello world")
bouton.pack()

mainapp.mainloop()

----------------- 

Positionner ses fenêtres de GUI via fonction pack ;

label.pack(side="top")    //utiliser top, bottom, right, left

label.pack(expand=1)  //la fonction va utiliser TOUT l'espace de la fenêtre grâce à la fonction expand

label.pack(side ="left", fill="y")  // va caler une colonne à gauche qui va longer toutes les coordonnées Y (ordonnées)

label.pack(padx =100, pady=5)  // positionnment en pixels à l'extérieur du widget

label.pack(ipadx =100, ipady=5)  // positionnment en pixels à l'intérieur du widget

----------------- 

Positionner ses fenêtres de GUI via fonction grid ;

Va créer comme un tableau invisible dans la fenêtre, où les widgets vont s'ordonner ;

label.grid(row=0, column=0)
label2.grid(row=0, column=1)
label3.grid(row=0, column=2)

label.grid(row=0, column=0, columspan=2)  //la colonne va s'afficher de la colonne 0 à 2 (attention à ne pas écraser les autres qu'il faudra décaler)
label.grid(row=0, rowspan=3, column=0)  //idem que pour la colonne mais pour la ligne

label.grid(sticky="se") // permet de placer le contenu du label par rapport à l'enveloppe de sa cellule (pas de la fenetre globale) 
n = nord / s = sud / e = est / w = ouest, qu'on peut combiner

----------------- 
Créer un menu affiché sur le GUI

#coding:utf-8

import tkinter

def hello():
	print("Coucou")


mainapp = tkinter.Tk()
mainapp.geometry("640x480")
mainapp.title("GUI")

# Créer la structure du menu (voir aussi config en bas de script)
mainmenu = tkinter.Menu(mainapp) 

# Créer les premiers segments de menu

premier_segment = tkinter.Menu(mainmenu)
second_segment = tkinter.Menu(mainmenu, tearoff=0) //tearoff permet d'enlever les tirets qui s'affiche dans le GUI lorsqu'apparait la list des options cliquables

# Nommer les segments

mainmenu.add_cascade(label="Segment1", menu=premier_segment)
mainmenu.add_cascade(label="Segment2", menu=second_segment)

# Créer les étiquettes sous les segments de menu (via fonction exemple.add_command)

premier_segment.add_command(label="Option1")
premier_segment.add_command(label="Option2", command=hello)    // via command on peut affecter une fonction qui se lance si on appuie sur le bouton option 2 du GUY
premier_segment.add_command(label="Option3")

second_segment.add_command(label="Choix1")
second_segment.add_command(label="Choix2")
second_segment.add_command(label="Quitter", command=app.quit) // permet de fermer le GUI

# A ne pas oublier pour creer la structure principale
mainapp.config(menu=mainmenu)
mainapp.mainloop()

********************************************************************* Gestion du temps

On peut gérer le temps (latence de fonction ou autre) via le module time. le module time compte les secondes depuis le 01/01/1970 à minuit

fonctions du module time :
time.sleep(secondes) // décaler l'execution de la fonction qui suit cette fonction
print(time.time()) // afficher le nombre de secondes écoulées depuis le 01/01/1970
print(time.localtime()) // Afficher la structure du temps depuis le temps écoulé depuis le 01/01/1970 (en années, jours, mois, minutes,  ...)
print(time.strftime()) // Afficher des données de temps
----------------- 

Décaler l'exécution d'une fonction via la fonction sleep

ex :

#coding:utf-8

import time

print("Premier texte immediat")

time.sleep(5)

print("Deuxième texte différé")

----------------- 

Calculer le temps d'éxecution pour optimiser les temps de réponses sur les algorythmes lors du code ou autre :

#coding:utf-8

import time

begin = time.time()
print("Début")

time.sleep(5)

end = time.time()

print("Fin")

print(f"Temps exécuté : {end - begin}s")    // le f permet de formater l'affichage

----------------- 

Afficher une donnée de temps :

%d : jour (de 01 à 31)
%m : mois (de 01 à 12)
%Y : année (ex : 2021) - %y (00 à 99)
%H : heure (de 00 à 23)
%I : minutes (de 00 à 59)
%S : secondes (de 00 à 59)
%p : Afficher en AM/PM

%A : jour de la semaine en lettres ou %a : jour abrégé
%B : mois en lettres ou %b : mois abrégé

%Z : afficher la timezone (fuseau horaire)

ex : 

print(time.strftime("%Y-%m-%d"))


********************************************************************* Gestion des dates

Les dates fonctionnent avec le module datetime, 

Les fonctions utilisables : 

datetime.datetime(annee, mois, jour, heure, min, secondes)
datetime.date(annee, mois, jour) 
datetime.time(heure, minutes, secondes)
datetime.now()

----------------- 

Etant des objets, on peut omparer des dates, ex ;

#coding:utf-8

import datetime

date1 = datetime.datetime(2021, 2, 24, 9, 36, 42)
date2 = datetime.datetime(2020, 3, 30, 10, 36, 55)

if date1 < date2:
	print("date1 est plus ancien que date2")
else:
	print("date1 est plus récent que date2")

----------------- 

Afficher qu'une seule valeur (avec meme ex que date1 & 2 du dessus), ex ;

print(date1.year)


----------------- 

Récupérer la date du jour ;

#coding:utf-8

from datetime import date

now = date.today()
print(now)

----------------- 

********************************************************************* Programmation asynchrone

La programmation asynchrone permet d'éviter le traitement séquentiel natif de python (traitement de haut en bas d'un script)

0°) importer le module threading (et le module time si appel d'une fonction time)
1°) threading.Thread : Définir le ou les threads (coeur de traitement par fonction)
2°) start : Démarrer les threads
3°) join : Lier les threads pour ensuite reprendre le traitement séquentiel (permet donc bloquer une partie de traitement)

Fonction annexe, le verrou : Rlock() (du module threading)

On peut utiliser une fonction de verrou ; permet de créer un traitement parallèle mais en cloisonnant les tâches ;
par ex ; dans une societé deux employés lancent en meme temps une impression sur la même imprimante
sans verrou, les impressions vont se mélanger (feuille 1 employé A, puis feuille 1 employé B, ..)
le verrou permet de lancer les deux impressions, mais qui vont s'opérer l'une après l'autre
----------------- 

Exemple de script asyncrhone (puis retravaillé en classe ci-après)

#coding:utf-8


# import des modules nécessaires 

import time

import threading

# définition des fonctions (ici des compteurs incrémentés délayés)

def premier_processus():
	i = 0
	while i < 3:
		print("oooooooo")
		time.sleep(0.3)
		i +=1

def second_processus():
	i = 0
	while i < 3:
		print("xxxxxxx")
		time.sleep(0.3)
		i +=1


# création des coeurs de traitement asynchrones

premier_coeur = threading.Thread(target=premier_processus)
second_coeur = threading.Thread(target=second_processus)

# lancement des coeurs

premier_coeur.start()
second_coeur.start()

# liaison des coeurs pour que le traitement séquentiel ne reprenne qu'à la fin des boucles de comptage

premier_coeur.join()
second_coeur.join()

# reprise du traitement séquentiel du script

print("Fin de processus")

----------------- 

#coding:utf-8


# import des modules nécessaires 

import time

import threading

# définition d'une classe de fonctions afin d'optimiser le code

class Coeurs(threading.Thread):
	def __init__(self):
		threading.Thread.__init__(self)

	def run(self):
		i = 0
		while i < 3:
			print(threading.current_thread())
			time.sleep(0.3)
			i +=1

# le print fait appel à la fonction RUN (traitement) du module thread (ne fonctionne pas sans !!)
# on print une fonction du module thread qui permet d'afficher le coeur utilisé

# création des coeurs via la class Coeurs, qui héritent donc de la fonction run

premier_coeur = Coeurs()
second_coeur = Coeurs()

# lancement des coeurs

premier_coeur.start()
second_coeur.start()

# liaison des coeurs pour que le traitement séquentiel ne reprenne qu'à la fin des boucles de comptage

premier_coeur.join()
second_coeur.join()

# reprise du traitement séquentiel du script

print("Fin de processus")


----------------- 

Utilisation de la fonction RLock du module threading, pour bien que chaque coeur remplisse sa fonction séparement, les traitements ne sont pas mélangés (on sort ABCABC au lieu de AABBCCAABBCC)

#coding:utf-8


# import des modules nécessaires 

import time

import threading

fonction_verrou = threading.RLock()

# définition d'une classe de fonctions afin d'optimiser le code

class Coeurs(threading.Thread):
	def __init__(self):
		threading.Thread.__init__(self)

# on fait appel à la fonction RUN (traitement) du module thread (ne fonctionne pas sans !!)

	def run(self):
		i = 0
		while i < 3:
			with fonction_verrou:
				letters = "ABC"
				for car in letters:
					print(car)
					time.sleep(0.3)
			i +=1

# on invoque la fonction RLock (attention aux MAJ) via with

# création des coeurs via la class Coeurs, qui héritent donc de la fonction run

premier_coeur = Coeurs()
second_coeur = Coeurs()

# lancement des coeurs

premier_coeur.start()
second_coeur.start()

# liaison des coeurs pour que le traitement séquentiel ne reprenne qu'à la fin des boucles de comptage

premier_coeur.join()
second_coeur.join()

# reprise du traitement séquentiel du script

print("Fin de processus")

********************************************************************* OS mkdir module OS

# récupérer l'addresse du répertoire courant :
import os 

repertoire_coutant = os.getcwd()

# changer de repertoire :
os.chdir('/dossier1/')

# lister tous les dossier d'un répertoire 

print(os.listdir('/dossier1/')

# créer un dossier non récursif c'est à dire sur un seul niveaux:

os.mkdir('/dossier1/nomdossieracreer')

# créer des dossiers de manière récursive :

os.makedirs('/dossier1/sousdossier2/soussousdossier3')

# supprimer un dossier :

os.rmdir('/dossier1/')


********************************************************************* Serveur HTTP et page web

Démarrer un serveur en local, restera ouvert tant que le cmd est ouvert ex :

----------------- 

#coding:utf-8 

import http.server
import socketserver

# Initialiser le port HTTP(80)

port = 80
address = ("", port)

# addresse non renseignée car connexion en local

# Création d'un gestionnaire de requêtes standard (faire attention aux MAJ)

gestionnaire = http.server.SimpleHTTPRequestHandler

preparationsocket = socketserver.TCPServer(address, gestionnaire)

print("Serveur démarré sur le port {}".format(port))

preparationsocket.serve_forever()

----------------- 

Créer un lecteur socket

Pour créer une socket internet : socket.AF_INET

Socket internet via TCP (communication supervisée et data intègre, plus lent): 

server = socket.socket(socket.AF_INET, socket.socket.SOCK_STREAM)

Socket internet via UDP (communication unilatérale non supervisée avec possibilité perte paquets mais plus rapide): 

server = socket.socket(socket.AF_INET, socket.socket.SOCK_DGRAM)

Il faut configurer l'hôte en récupérant l'adresse IPV4 du réseau local (via cmd/ipconfig)

récupérer son addresse locale de façon dynamique :

host = socket.gethostbyname(socket.gethostname())

indiquer que l'hote du socket est local et ne pas chercher d'ip :

HOST = 'localhost'      ou    HOST = '127.0.01'

------------ le script de création du socket côté serveur

import socket

HOST = '192.168.0.206'
PORT = 9090

server = socket.socket(socket.AF_INET, socket.socket.SOCK_STREAM)

server.bind((HOST, PORT))

server.listen(5)

while True:
	communication_socket, address = server.accept()
	print("connecté)
	flux_entrant =  communication_socket.recv(1024).decode('utf-8')
	("le message entrant est :", flux_entrant)
	communication_socket.send("message sortant".encode('utf-8))


communication_socket.close()
server.close()

print("communication achevée")

------------ le script d'import du socket côté client

import socket

HOST = '192.168.0.206'	
PORT = 9090                 # le port doit être le même que le serveur

server = socket.socket(socket.AF_INET, socket.socket.SOCK_STREAM)

server.connect((HOST, PORT))

socket.send("hellow world!".encode("utf-8"))
print(socket.recv(1024).decode("utf-8"))

server.close()

OU AUTRE EXEMPLE 


HOST = '192.168.0.206'	
PORT = 9090                 
server = socket.socket(socket.AF_INET, socket.socket.SOCK_STREAM)

server.connect((HOST, PORT))
data = "bonjour je suis le client !"
data = data.encode("utf8")
server.sendall(data)


######################################

Voir videoformation N°29 et 30 et 31 pour voir comment créer les pages HTML, cookies et formulaires

********************************************************************* Les BDD (bases de données)

<<<<<<<<<<<Travail avec SQLite :
1°) Remplace les fichiers textes
2°) Permet de travailler jusqu'à BDD de 1Go
3°) Ne gère pas les multi utilisateurs de quantité importante (aller sur mysql)

site : https://sqlitebrowser.org/

Fonctions sqllite :

cursor.rowcount : compter les lignes
cursor.lastrowid : créer une clé primaire à la suite des saisies existantes

----------------- 

Voir sur SQ lite pour création de table :

Lors de la création d'un champ : 
IA : auto incrémentation
PK : Clé primaire

----------------- 

Utiliser la BDD créée via python et LIRE une donnée de la BDD créée :


#coding:utf-8 

# importer le module (natif)

import sqlite3

# Créer une fonction qui permet de lier python à la BDD (ne pas oublier la fonction close en fin)
# On spécifie bien le fichir lié (ici BDD.db)

connexionBDD = sqlite3.connect("BDD.db")

# Créer un curseur

curseur = connexionBDD.cursor()

Objet = ("Livre",)

curseur.execute('SELECT * FROM ABC_BDD WHERE Objet = ?', Objet)

# sélectionner toutes les infos de la table ABC_BDD ou Objet est égal à ...

print(curseur.fetchone())

connexionBDD.close()


----------------- 

Créer une nouvelle ligne de données dans la BDD existante


#coding:utf-8 

# importer le module (natif)

import sqlite3

# Créer une fonction qui permet de lier python à la BDD (ne pas oublier la fonction close en fin)
# On spécifie bien le fichir lié (ici BDD.db)

connexionBDD = sqlite3.connect("BDD.db")

# Créer un curseur

curseur = connexionBDD.cursor()

# Création d'un nouvel objet

nouvel_objet = (curseur.lastrowid, "Table", 100)

# lastorowid permet de continuer à créer une clé primaire qui suive la dernière

curseur.execute('INSERT INTO ABC_BDD VALUES(?, ?, ?)', nouvel_objet)

# Insertion d'une nouvelle ligne

connexionBDD.commit()

# Réaliser l'enregistrement

print("Nouvel objet ajouté")

connexionBDD.close()

----------------- 

Consulter le contenu de la BDD entière via print (execute est reservé)

requete = curseur.execute('SELECT * FROM ABC_BDD')
print(requete.fetchall())

----------------- 

Consulter le contenu dd'une ligne spécifique de la BDD via print (execute est reservé)

requete = curseur.execute('SELECT * FROM ABC_BDD')

for row in requete.fetchall():
	print(row[1])


----------------- 

Gestion des erreurs et non-enregistrement en cas d'erreur (rollback mot reservé qui annule l'enregistrement en cours)

try :
	XXXX
	XXXX
	XXXX

except Exception as e:
	print("[ERREUR]", e)
	connexion.rollback()

finally:
	connexion.close()


----------------- 

Ajouter du contenu dans la BDD (autre méthode)

#coding:utf-8 

# importer le module 

import mysql.connector

# Placer un try except pour suivre les erreurs
# Renseigner les données de connexion 

try :
	connexion = mysql.connector.connect(host = 'localhost', datebase ='datatest', user = 'root', password = '')
	curseur = connexion.cursor()

# Construire la requete qui va alimenter la BDD, mettre le nom des colonnes de la BDD

	requete = 'INSERT INTO ABC_BDD(colonne1, colonne2, colonne2) VALUES(%s, %s, %s)'

# renseigner les données qui seront ajoutées via la requete

	infos = (curseur.lastrowid, 'ajoutdonneecolonne2', 'ajoutdonneecolonne3')

	curseur.execute(requete,infos)

# executer l'ajout

	connexion.commit()

# Ne pas oublier le commit (reservé), sans ça l'ajoute ne sera pas écrit dans la BDD

# ce qui vient après permet de vérifier ce qui a été saisit (donc facultatif)
S
	requete = 'SELECT * FROM ABC_BDD'
	curseur.execute(req)
	ABD_BDD = curseur.fetchall()

	for cellules in ABC_BDD:
		print('Colonne a afficher : {}'.format(cellules[N°colonne]))

# fin du facultatif

except mysql.connector.error as erreur:
	print(erreur)

finally:
	if(connexion.is_connected()):
		curseur.close()
		connexion.close()

Update SQL (voir metabot script check seed)

PYTHON SQL UPDATE TABLE : 

https://pynative.com/python-sqlite-update-table/


*******************************************************************************
TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS
*******************************************************************************
ASTUCES PYTHON

######## optimiser la gestion de la mémoire, en enregistrant dans la mémoire des opération déja réalisées ;

importer dans un premier temps le module, et appeler juseta vant la fonction visée, par ex ;

from functools import lru_cache

@lru_cache(maxsize=256)

def fonction_addition(a = int, b:int):
	return a + b

ici le module va enregistrer les 256 dernières utilisations pour les retenir en mémoire, 
si le calcul a réalisé a déja été enregistré, le retour sera immédiat

############# COMPILER EN PYTHON DIRECTEMENT DANS l'IDE :

from numba import jit

et avant le code visé, écrire :

@jit(nopython=True)

################ CREER UNE FONCTION AVEC UN NB D'ARGUMENTS INFINI, grâce à *

def add_number(*elements_to_sum)
	for n in elements_to_sum
		results += n
	print("sum", results)

add_number(5,10,20,46,12)


########################## CREER UNE FONCTION AVEC UN NB D'ARGUMENTS ET CLES INFINI, grâce à **

def generate_pokemon(**kwargs)  # on peut mettre ce qu'on veut après **, c'est juste pour formaliser une entree)
	d = dict()
	for key, value in kwargs.items()
	print(key, value)
	d[key] = value

ensuite on genere les objets en direct après la fonction, les clés renseignées seront traitées par l'entrée **kwargs

ex 

a = generate_pokemon(color="blue", level=15, element="water")

################# CREER UN ITERATEUR :

Permet de traiter dde très grandes listes, pour ne pas les garder en mémoire mais traiter ligne par ligne :

from itertools import cycle

fruits = [poire, pomme, cherry, mango, banana]
drinks = [gin_tonic, limonade, coca, iced_tea]

iterator_fruits = iter(fruits) # création de l'itérateur
print(next(iterator_fruits)) # affiche le premier (premier next)
print(next(iterator_fruits)) # affiche le second, ...

Utiliser Cycle : permet de créer des cycles de listes, et de définir des conditions d'intéraction,
one ne le voit pas mais quand une liste est cyclée, elle tourne a l'infini

ex :
number_days = 0

cycle_fruits = cycle(fruits)
cycle_drinks = cycle(drinks)

while condition_not_met:
	fruit = next(cycle_fruits)
	drink = next(cycle_drinks)
	
	if fruits  == 'cherry' and drink =='iced tea':
		break

	number_days +=1

######################


Commentaires :

# voici un commentaire

---------

Sauter une ligne (même en pleine phrase);

\n

---------


Ajouter une tabulation 

\t
---------

################################################# SELENIUM (projet Metabot)

Installation :  

https://selenium-python.readthedocs.io/api.html

Documentation :

https://www.selenium.dev/documentation/

Raccourcis API SELENIUM :

https://selenium-python.readthedocs.io/api.html

################################################# BLACK FORMAT

pip install black

BLACK PYTHON :

https://dev.to/adamlombard/how-to-use-the-black-python-code-formatter-in-vscode-3lo0

#############################################

PYTHON PRO :

Ne pas utiliser de string, mais créer une class pour éviter les erreurs de saisie ; ex avec male / female

from enum import Enum

class Gender(Enum):

	MALE = 'male'
	FEMALE = 'female'
	UNKNOW = 'unknow'

male = Gender.MALE

##########################################"

Générer une liste en une seule ligne via for, ex pour créer une liste de 0 à 20 ;

number_even = []
for i in range(20):
	if i % 2 == 0:
	number_even_append(i)

devient :

number_even = [x for x in range(20) if x % 2 ==0]

##############################################

Créer un if / else en une seule ligne, ex ;

if x == 1:
	value = 15
else :
	value = 10

devient ;

value = 15 if x == 1 else 10

#########################################################

Initialiser davantage les fonctions, pour faciliter le debugging ;

def my_function(a, b):
	my_dict = dict()
	my_dict[a] = b
	return my_dict

devient

def my_function(a : str, b: int) -> Dict[str, int]:
	my_dict = dict()
	my_dict[a] = b
	return my_dict

#######################################################

compter les occurences des élements d'une liste :

from collections import Counter

my_liste = ['banana', 'lemon", 'apple', 'banana', 'banana']

Counter(my_liste)

pour compter les occurences dans une liste d'une valeur 

print(counter['banana'])

pour identifier les occurences les plus courantes dans une liste, avec leur nombre

most_common = counter.most_common(1)

renvoie en tuple l'occcurence visée, puis son nombre d'occurences,

on peut ainsi sélectionner à la place de 1, les occurences visées (les deux plus communes, trois, ...)

#########################################################

supprimer les doublons d'une liste (sur modèle de liste au dessus)

list(set(my_liste)

#########################################################"

lisser les imports des modules (pour respect des conventions)

pip install isort

############################################################

STOCKER LE LOGGING dans un fichier

import logging

logging.warning("watch out!")  # va afficher un messaage
logging.info('the database is now set up') # ne va pas afficher

documentation PYTHON sur le module + tableau avec les arguments passables 

https://docs.python.org/3/library/logging.html

DEBUG : informations détaillées
INFO : confirmation que le script se déroule bien comme convenu
WARNING : indication qu'un événement imprévu s'est produit, ou anticipe un probleme
ERROR : indique qu'un probleme sérieux s'est produit, dysfonctionnement
CRITICAL : erreur critique

on ajoute la commande logging.debug() ou .info ou .warning ou ... comme un print()

EX :

import logging

logging.basicConfig(filename='journal.log', level=logging.DEBUG, format='	
%(asctime)s:%(funcName)s:%(levelname)s:%(lineno)d:%(message)s')

def addition(a, b):
	return a + b

resultat = addition(3,4)

logging.info(resultat)

AUTRE SOLUTION PLUS COMPLETE AVEC CREATION LOG HORS ROOT + PRECIS ET AFFICHAGE TERMINAL

import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

formatter = logging.Formatter('%(asctime)s:%(funcName)s:%(levelname)s:%(lineno)d:%(message)s')

file_handler = logging.FileHandler('sample.log')
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)

stream_handler = logging.StreamHandler()  #permet d'afficher dans terminal en même temps
stream_handler.setFormatter(formatter)

logger.addHandler(file_handler)
logger.addHandler(stream_handler)

def addition(a, b):
	return a + b

resultat = addition(3,4)

logger.info(resultat) ##### Bien penser à mettre le nom du logger créé (ici logger)

#####" TIPS

Dans un try except, on peut écrire

except Exception:
	logger.exception()

##########################################################

Pour importer et travailler sur un CSV, importer pandas ;

import pandas as panda

fichier_csv = panda.read_csv('fichier_à_importer.csv')

réaliser des requetes sur fichier csv ;

data_filtre = fichier_csv.query("color == yellow").query('level > 50')

l'enchainement de .query permet d'ajouter des couches de filtres (ici tous les objets jaunes AVEC un niveau supérieur à 50)

!!!!!!!! NE JAMAIS FAIRE DE LOUPE SUR UN FICHIER, pour BOUCLER SUR CSV :

proscrit :

for row in fichier_csv.iterrows():
	fichier_csv['level'] = fichier_csv['level'] * 5

a faire (permet traitement parrallèle, et non séquentiel);

fichier_csv['level'] = fichier_csv.apply(lambda row: row['level'] * 5, axis = 1)

#############################################################3

SUPPERPOSER LE TRAITEMENT OU LECTURE DE DEUX LISTES (DIFFERENT DE CYCLE) VIA ZIP

pays = ["france", "grece", "espagne"]
capitales = ["paris", "athenes", "madrid"]

for country, capital in zip(pays, capitales):
	print(la capitale de {} est {}.format(country, capital))

il faut faire attention que les listes soient déja superposables de base...

#######################################################3

MODULE POUR IDENTIFIER LES ERREUR DE CCODE AVANT LANCEMENT TERMINAL

pip install mypy

mypy src

######### LE ZEN PYTHON

import This


####################### OPTIMISER LA CREATION D'UNE LISTE

square = []
for i in range(10):
	squares.append(i*i)

EST EGAL A 

squares = [i*i for i in range(10)]

##########################3 TRIER LA SORTIE ou EXTRAIRE DANS ITERABLE

data = [3, 5, 2 , 9, 0]
sorted_data = sorted(data, reverse=True)

extraire data spécifique d'un dictionnaire par ex

data = [{"name": "max", "age": 6}, {"name":"Lisa", "age":20}, {"name": "ben", "age":9}]

sorted_data = sorted(data, key = lambda x: x["age"])
OU
sorted_data = sorted(data, key=itemgetter('age'))


################ OPTIMISER LA GENERATION DE GRANDES LISTES + SUIVI SYSTEME TAILLE BYTE

import sys

my_list = [i for i in range(10000à]
print(sum(my_list))
print(sys.getsizeof(my_list), "bytes"]

OPTIMISABLE EN 

my_gen = (i  for i in range(10000))
print(sum(my_gen))
print(sys.getsizeof(my_gen), "bytes"]


#####################################################" MODULE SMTP PYTHON ENVOYER MAIL

FONCTIONNE : 

# VERSION 1

""" 
server = smtplib.SMTP("smtp.gmail.com", 587)
server.starttls()
server.login("webhookmsg@gmail.com", "mdp app gmail")
sujet = "SUCE"
body = "MES"
msg = f"Subject: {sujet} \n\n {body}"
server.sendmail("webhookmsg@gmail.com", "destinataire@gmail.com", msg)

"""

# VERSION 2
msg = EmailMessage()
msg["Subject"] = "test"
msg["From"] = "webhookmsg@gmail.com"
msg["To"] = "destinataire@gmail.com"
msg.set_content("salut mon pote alors ça te tente?")

with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
    smtp.login("webhookmsg@gmail.com", "mdp app gmail")
    smtp.send_message(msg)


BULLSHIT :

(vidéo du 18/03/2018 de corey shafer - how to send emails using python)


import os
import smtplib

EMAIL_ADDRESSE = os.environ.get('adresse email a saisir')
EMAIL_PASSWORD = os.environ.get('mot de pass spécial gmail fourni')

with smtplib.SMTP("smtp.gmail.com", 587) as smtp:           #587 est le port (à choisir)
	smtp.ehlo()
	smtp.starttls()    #permet d'encrypter, nécessite le relancement de elho après
	smtp.ehlo()

	smtp.login(EMAIL_ADDRESSE, EMAIL_PASSWORD)

	sujet = 'Grab dinner this weekend?'
	body = 'salut mon pote alors ça te tente?'
	
	msg = f'Subject: {sujet} \n\n {body}'

	smtp.sendmail(EMAIL_ADDRESSE, "adresse_destinataire", msg)


-------------------------------- AUTRE METHODE PLUS CLEAN AVEC ENVOI PJ IMAGE

import os
import smtplib
from email.message import EmailMessage
import imghdr

EMAIL_ADDRESSE = os.environ.get('adresse email a saisir')
EMAIL_PASSWORD = os.environ.get('mot de pass spécial gmail fourni')

msg = EmailMessage()
msg['subject'] = 'Grab dinner this weekend?'
msg['From'] = EMAIL_ADDRESSE
msg['To'] = "adresse_destinataire"
msg.set_content('salut mon pote alors ça te tente?')

with open('chemin de l'image ou du document à joindre avec le type (genre.jpg)', 'rb') as f:
	file_data = f.read()
	file_type = imghdr.what(f.name)
	file_name = f.name

msg.add_attachment(file_data, maintype='image', subtype=file_type, filename=file_name)

with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:    
	smtp.login(EMAIL_ADDRESSE, EMAIL_PASSWORD)
	smtp.send_message(msg)   

------------------------------------------ ENVOI MAIL VEC PLUSIEURS PJ

import os
import smtplib
from email.message import EmailMessage
import imghdr

EMAIL_ADDRESSE = os.environ.get('adresse email a saisir')
EMAIL_PASSWORD = os.environ.get('mot de pass spécial gmail fourni')

msg = EmailMessage()
msg['subject'] = 'Grab dinner this weekend?'
msg['From'] = EMAIL_ADDRESSE
msg['To'] = "adresse_destinataire"
msg.set_content('salut mon pote alors ça te tente?')

files = ['nom_image1.jpg', 'nom_image2.jpg']

for file in files:
	with open(file, 'rb') as f:
		file_data = f.read()
		file_type = imghdr.what(f.name)
		file_name = f.name

	msg.add_attachment(file_data, maintype='image', subtype=file_type, filename=file_name)

with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:    
	smtp.login(EMAIL_ADDRESSE, EMAIL_PASSWORD)
	smtp.send_message(msg)   


-------------------------------- ENVOYER AUTRE CHOSE QUE DES IMAGES


import os
import smtplib
from email.message import EmailMessage
import imghdr

EMAIL_ADDRESSE = os.environ.get('adresse email a saisir')
EMAIL_PASSWORD = os.environ.get('mot de pass spécial gmail fourni')

msg = EmailMessage()
msg['subject'] = 'Grab dinner this weekend?'
msg['From'] = EMAIL_ADDRESSE
msg['To'] = "adresse_destinataire"
msg.set_content('salut mon pote alors ça te tente?')

files = ['resume.pdf']

for file in files:
	with open(file, 'rb') as f:
		file_data = f.read()
		file_name = f.name

	msg.add_attachment(file_data, maintype='application', subtype='octet-stream', filename=file_name)

with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:    
	smtp.login(EMAIL_ADDRESSE, EMAIL_PASSWORD)
	smtp.send_message(msg)   


------------------- ENVOYER MAIL A PLUSIEURS DESTINATAIRES


import os
import smtplib
from email.message import EmailMessage
import imghdr

EMAIL_ADDRESSE = os.environ.get('adresse email a saisir')
EMAIL_PASSWORD = os.environ.get('mot de pass spécial gmail fourni')

contacts = ['contact@gmail.com', 'contact2@yahoo.com']

msg = EmailMessage()
msg['subject'] = 'Grab dinner this weekend?'
msg['From'] = EMAIL_ADDRESSE
msg['To'] = contacts    OU ', '.join(contacts)
msg.set_content('salut mon pote alors ça te tente?')

files = ['resume.pdf']

for file in files:
	with open(file, 'rb') as f:
		file_data = f.read()
		file_name = f.name

	msg.add_attachment(file_data, maintype='application', subtype='octet-stream', filename=file_name)

with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:    
	smtp.login(EMAIL_ADDRESSE, EMAIL_PASSWORD)
	smtp.send_message(msg)   


-------------------------------- ENVOYER FORMAT HTML DANS LE MAIL (pour mise en page)

import os
import smtplib
from email.message import EmailMessage
import imghdr

EMAIL_ADDRESSE = os.environ.get('adresse email a saisir')
EMAIL_PASSWORD = os.environ.get('mot de pass spécial gmail fourni')

contacts = ['contact@gmail.com', 'contact2@yahoo.com']

msg = EmailMessage()
msg['subject'] = 'Grab dinner this weekend?'
msg['From'] = EMAIL_ADDRESSE
msg['To'] = contacts    OU ', '.join(contacts)
msg.set_content('this is a plain text email')

msg.add_alternative("""\
<!DOCTYPE html>
<html>
	<body>
		<h1 style="color:SlateGray;"">This is an HTML EMAIL ! </h1>
	</body>
</html>
""", subtype='html')

with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:    
	smtp.login(EMAIL_ADDRESSE, EMAIL_PASSWORD)
	smtp.send_message(msg)   


****************************************************************************************************
****************************************************************************************************
****************************************************************************************************

Langage C sous windows // Mix shell/C

Télécharger les compilateurs gcc sur https://winlibs.com/#download-release et télécharger un editeur de texte style Sublimtext

Se positionner via le terminal dans le dossier ou le fichier à compiler se situe, via commande cd cheminaccès
Pour compiler un script, à saisir dans le terminal Windowd : 
gcc nomdufichier.c -o nomdufuturfichierexecutable
ex : gcc main.c -o hello

Va créer un fichier executable dans le dossier ou nous sommes localisés (via cd)
pour executer le fichier, taper dans le terminal hello.exe


Minimum à écrire en création d'un fichier c ;

#include <stdio.h> 

pour générer la bibliothèque de fonctions de base (fichier d'en tête), il faut également obligatoirement une fonction main

ex : script hello world

#include <stdio.h>

int main(void)
{
	printf("Hello world ! :)\n");
	return 0;
}

********************************************************************* Les variables

Quand on veut afficher le résultat d'une variable (avec printf), il faut déterminer quel type de variable doit être affiché ;

#include <stdio.h>

int main(void)
{
	//déclaration et affectation d'une variable de type entier (int)
	int nombre_entier = 45;
	printf("%d\n", nombre_entier);

	return 0;
}

Soit printf("%d") pour les nombres entiers
Soit printf("%f") pour les nombres flottants. Si on veut que deux décimales après la virgule, taper "%.2f"
Soit printf("%c") pour les caractères (signed char ou unsigned)
Soit printf("%s") pour les chaines de caractères (texte)
soit prinf ("%p") pour invoquer un pointeur et afficher l'addresse d'une &variable

\n sert à faire un retour à la ligne

Qualifier une variable en tant que constante (dans les conventions, on écrit les constantes en MAJ):

#include <stdio.h>

int main (void)
{
	const float PI = 3,14;
	printf("La constante PI est de %.2f", PI);
	return 0;
}


On peut prioriser le traitement d'une variable, avec les mots register ou volatile
register permet de traiter la variable avec les registre flash 
volatile permet de traiter la variable avec la RAM

ex :
register int nombre =5;
volatile int autre_nombre = 6;

********************************************************************* Lire données au clavier

#include <stdio.h>

int main(void)
{
	int AgeUtilisateur = 0;

	printf("Quel age as-tu? \n");

	scanf("%d", &AgeUtilisateur);

	printf("Tu as %d ans.\n", AgeUtilisateur);

	return 0;
}

AgeUtilisateur : contenu de la variable (exemple AgeUtilisateur = 25)
&AgeUtilisateur : addresse où est stockée la variable


********************************************************************* Les opérateurs

+ (addition)
- (soustraction)
* (multiplication)
/ (division) -> 5 /2 = 2
% (modulo) -> 5 % 2 = 1 (le reste non détaillé de la division)

== : égal à
!= : différent de 

< : plus petit que 
<= plus petit ou égal à

> : plus grand que
> : plus grand ou égal à 

&& : Et
|| : Ou
!  : Not (n'est pas)

#include <stdio.h>

int main(void)
{
	int nb1 =0;
	int nb2 =0;

	printf("Tape le premier nombre ", nb1);

	scanf("%d", &nb1);

	printf("Tape le deuxieme nombre ", nb2);

	scanf("%d", &nb2);

	printf("Le total est %d", nb1 * nb2);

	return 0;
}


********************************************************************* Les conditions

switch
if, qu'on peut utiliser avec else

#include <stdio.h>

int main(void)
{
	int nombre = 1;

	if(nombre ==0)
	{
		printf("Mon nombre vaut Zero");
	}

	else

	{	
		printf("Nombre different de Zero");
	}	

	return 0;
}


On peut aussi utiliser if et else if, 
1) On ne met qu'un if
2°) On peut mettre autant de else if qu'on veut
3°) Il faut finir par un else


#include <stdio.h>

int main(void)
{
	int nombre = 1;

	if(nombre <0)
	{
		printf("Mon nombre est inferieur a Zero");
	}

	else if(nombre >0)

	{	
		printf("Nombre est superieur a Zero");
	}	
	
	else(nombre ==0)
	{
		printf("Le nombre est egal a zero");
	}

	return 0;
}


#include <stdio.h>

int main(void)

{
	int age = 100;

	if(age > 0 && age < 1)
	{
		printf("Tu es ne");
	} 

	else if(age == 0 || age < 0)
	{
		printf("Tu vas naitre");

	}

	else
	{
		printf("tu es plus qu'un nourrisson");

	}

	return 0;
}

Le switch est a privilégier quand il y a de nombreuses hypothèses, pour éviter de cumuler les if
Il faut bien respecter le break et le default à la fin (qui remplace le else final)


#include <stdio.h>

int main(void)
{
	int age = 0;

	switch(age)
	{
		case 0:
		printf("tu n'est pas ne");
		break;

		case 15:
		printf("tu as 15 ans");
		break;

		default:
		printf("Tu as un age bizarre");
		break;
	}


	return 0;
}


Le ternaire ;

Test sous condition valide ou invalide

#include <stdio.h>

int main(void)
{
	int age = 0;

	(age == 40) ? printf("Tu as 40 ans") : printf("Tu n'as pas 40 ans");

	return 0;
}

traduction ; 
L'age défini est 0 ans, est-ce qu'il a 40 ans?, si oui cela affiche tu as 40 ans, sinon il faut afficher Tu n'as pas 40 ans.


********************************************************************* Les boucles (while, do while, for)

Par convention, le "i" représente un compteur
la fonction de boucle est utilisée avec while
On peut la combiner avec la fonction do


#include <stdio.h>

int main(void)
{
	int compteur_i = 0;

	while(compteur_i < 20)
	{
		printf("Je recopie");
		compteur_i++;
	}

	return 0;
}

Dans cette fonction, le compteur arrive à 20 grâce à l'incrémentation de la variable compteur grâce au ++ accollé
while dans le sens : tant que compteur est plus petit que 20

#include <stdio.h>

int main(void)
{
	int compteur_i = 20;

	do
	{
		printf("Je recopie");
		compteur_i++;
	}

	while(compteur_i < 20);
	
	return 0;
}


La différence avec la première ; avec Do, le script est exécuté au moins une fois, et ne fonctionne pas si la condition n'est pas respectée, alors qu'avec juste while, si la condition n'est pas respectée, il n'y a rien d'affiché du tout

Le for ;

#include <stdio.h>

int main(void)
{
	int compteur_i = 0;

	for (1 ; 2 ; 3)
	{
		printf("Affiche toi");
	}
	
	return 0;
}


L'étape 1 est l'étape d'initialisation, c'est la condition de départ, on initialise la variable de départ
L'étape 2 est la condition à vérifier (tant que)
L'étape 3 est l'incrémentation ou la décrémentation 

Cela donne ;

#include <stdio.h>

int main(void)
{
	int compteur_i = 0;

	for (compteur_i = 0 ; compteur_i < 20 ; compteur_i++)
	{
		printf("Affiche toi");
	}
	
	return 0;
}


plus court et efficace

********************************************************************* Les fonctions

Dans les conventions, une fonction ne sert qu'à faire qu'une chose (ex printf sert à afficher un message"

Le but de la fonction ci-dessous est de réinitialiser une position intiale qui a été modifiée


#include <stdio.h>

int Reinitialiser_position (int positionInitiale)

{
	positionInitiale = 0;

	return positionInitiale;
}


int main (void)
{

	int positionInitiale;

	positionInitiale = Reinitialiser_position(positionInitiale);

	printf("la position initiale est : %d\n", positionInitiale);

	printf("Tu peux choisir la nouvelle position, saisis la");

	scanf("%d", &positionInitiale);

	printf("la position a reinitialiser est %d\n", positionInitiale);

	positionInitiale = Reinitialiser_position(positionInitiale);

	printf ("La position reinitialisee est %d", positionInitiale);

	return 0;
}

Autre exemple d'appel de fonction ;

#include <stdio.h>

void bonjour(void)
{
	printf("bonjour");
}

int main(void)
{
	bonjour();
	return 0;
}


********************************************************************* Programmation modulaire

La programmation modulaire permet de fragmenter un programme en fichiers afin de créer sa bibliothèque de fonctions et organiser le code

Il faut créer 3 fichiers pour un programme de base ;

- un fichier principal (ici appelé main.c)
- un fichier qui contient le sous jacent des fonctions créées (ici appelé player.c)
- un fichier d'entête, qui porte la bibliothèque personnalisée (ici appelé player.h mais qui peux porter un autre nom que l'autre)

Le fichier principal permet d'appeler les fonctions détaillées dans le player.c
Le fichier d'entête player. h permet de lister les fonctions détaillées dans le player.c

Pour compiler l'ensemble des fichiers en un seul executable, il faut écrire en terminal shell : 

gcc *.c -o prog

COMPOSITION DES FICHIERS ;

FICHIER MAIN.C		    // permet d'appeler les fonctions de player.c

#include <stdio.h>
#include "player.h"          //bibliothèque personalisée toujours à mettre dans les fichiers en .c, toujours entre " au lieu de <>

int main(void)
{	
	bonjour();         //appel de la fonction bonjour

	return 0;
}

FICHIER PLAYER.C            // inclut toutes les fonctions et leurs codes

#include "player.h"

void bonjour(void)		// fonction bonjour définie
{
	printf("bonjour")
}

FICHIER PLAYER.H

#ifndef PLAYER_H                  // if not defined  : si la constante n'est pas définie, alors definir.., pour éviter les compilations qui tournent en boucle sans fin
#define PLAYER_H			// toujours mettre meme nom que dans le ifndef, et toujours finir avec #enfi

void bonjour(void)		//fonction bonjour listée dans la bibliothèque

#endif				// a ne pas oublier 


********************************************************************* Les constantes 

Exemples de constante pré programmées ;

__FILE__ ; affiche le nom du fichier
__LINE__ ; affiche la ligne visée du fichier
__DATE__ ; affiche la date de compilation
__TIME__ ; affiche l'heure de compilation

ex, commande qui retourne le nom du fichier : 

#include <stdio.h>

int main(void)
{
	printf("Nom du fichier :%s", __FILE__);

	return 0;
}


********************************************************************* Les pointeurs

Le pointeur permet de lier une variable à l'addresse d'une autre variable

VARIABLES :
 mavariable : valeur de la variable
 &mavariable : addresse de la variable

POINTEURS :
 *mavariable : valeur de la variable pointée
 &mavariable :  renvoie vers l'addresse de la variable visée

déclaration et initialisation d'un pointeur :
*monpointeur = NULL ou *monpointeur = &mavariable

#include <stdio.h>

void inverser_nombres(int *nombreA, int *nombreB)
{
	int temporaire = 0,

	temporaire = *nombreB;
	*nombreB = *nombreA;
	*nombreA = temporaire;
}

int main(void)
{	
	int nombreA = 15;
	int nombre = 28;

	printf("AVANT : A = %d et B = %d", nombreA, nombreB);
	inverser_nombres(&nombreA, &nombreB);	
	printf("APRES : A = %d et B = %d", nombreA, nombreB);

	return 0;
}

*******************************************************************************
TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS TIPS
*******************************************************************************

-----------
langage C : 
-----------


Ne jamais oublier la fonction "main" sinon cela ne marchera pas

Toujours enregistrer son fichier de compilatione en UTF-8

Créer un commentaire où on veut sur une ligne //commentairevoulu

ou encore 

/*
*commentaire1
*Commentaire 2
*/

*******************************************************************************
Equivalents permet de coder plus vite ;

A = A - X
A -= X

A = A * X
A *= X

Suite arithmétique avec un pas de 1, équivalents ;

A +=1 -> A = A + 1 -> A++ ou ++A
A -=1 -> A = A - 1 -> A-- ou --A

*******************************************************************************

Pour stocker une variable
nombre = 0

Pour dire qu'une variable est égal à 
nombre == 0

Les opérateurs de comparaison 

*******************************************************************************

On peut utiliser le mot static pour que la variable ne se détruise pas à la fin de l'appel d'une fonction ;

ex dans le code suivant : 

static int niveau = 0;
niveau += 2;
return niveau;

A chaque fois que la fonction sera appelée, elle appelera la variable qui a été stockée lors du dernier appel, donc au bout du 3ème appel, le niveau sera de 6

#################################################################################################
#################################################################################################

RUST     
                      
documentation officielle RUST : https://www.rust-lang.org/
documentation officielle CARGO : https://doc.rust-lang.org/cargo/
moteur de recherche de crates open source (modules rust) : https://crates.io/

#################################################################################################
#################################################################################################

Mise en place de l'environnement de développement :

0°) télécharger RUST : https://www.rust-lang.org/tools/install
1°) MAJ de rust, dans terminal : rustup update                      (désinstaller rust : rustup self uninstall)
2°) formatter rust : rustfmt (inclus dans le pack rust installé)

-------------------------------------------------
consulter la documentation RUST à tout moment :
dans terminal : rustup doc
-------------------------------------------------

Les fonctions: 
0°) créées via "fn"

Les fonctions standardes :
1°) println! : afficher un message à l'écran (équivalent print python), ne marche pas sans le "!" qui indique que c'est une macro


>>>>>>>>>> Hello world :

fn main() {
    println!("Hello world !");
}

---------------------------------

Lancer un script : dans terminal ;

0°) rustc fichier_cible.rs                  # générer un exécutable
1°) .\fichier_cible.exe                     # lancer l'executable


REGLES :

0°) dans un script rust, si une fonction est appelée main, elle est toujours la première fonction a être executée
1°) quand il y a saisie utilisateur (input), il faut importer la biblio standarde input/output via use std::io;
2°) les créations de variable se fait via let (ex:let pommes = 5;)
3°) Les variables sont immuable de base, mais on peut les rendre mutable via mut (ex : let mut pommes = 5;)
4°) L'import de module n'est pas automatique, il faut modifier le fichier TOML du repo pour l'ajouter avec sa version sous [dependancies], ex ajouter rand = "0.8.3"
5°) Une fois l'import du module dans les dépendances du fichier TOML, il faut l'importer dans le script (comme import python), ex : use rand::Rng;
6°) Pour analyser la documentation d'un crate importé du script, on peut dans le terminal taper : cargo doc --open     puis cliquer sur le module visé
7°) Quand un user fait un input, il appuie sur entrée donc la valeur entrée est inpu_saisi/n car c'est équivalent à un saut de ligne en saisie
8°) Pour nettoyer la saisie d'un input il faut passer .trim() pour récuperer juste le input_saisi ex, variable_input.trim();
9°) Pour caster un str en int, il faut passer la variable en .parse(), soit variable_input.trim().parse(); pour caster un input saisi
10°) Ce cast ne fonctionne que sur des str qui ont une logique de conversion, ex : si la str "45" OK mais la str est "0x%" alors NON
11°) Pour gérer ce risque de compatibilité de la str, on colle un except pour catcher l'exception soit variable_input.trim().parse().except("message erreur"); 
11°) Pour préciser le type d'une variable on utilise let ma_variable: u32;
12°) La mutabilité d'une variable ne permet pas de changer le TYPE de cette variable, mais "seulement" sa valeur
13°) Pour changer le TYPE d'une variable en cours de script il faut l'écraser via un autre let, car mut ne fonctionne pas
14°) Si une variable chiffrée dépasse le taille allouée, il ne sortira pas en erreur, il faut donc prévoir et envelopper ces variables via wrapping_, checked, overflowing, ..
15°) On déclare une variable de char simple(1 caractère) entre simple quote '', et on déclare les chaines via double quote ""
16°) On explore un tuple via tuple.0, on explore un array via array[0]
17°) On déclare la fonction principale du script via main(), et les autres via fn()
18°) Il faut toujours déclarer les types des arguments de fonction lors de création d'une fonction
19°) Les corps de fonctions sont constitués d'une série d'instructions qui se termine éventuellement par une expression.
20°) Les instructions ont un ; et effectuent des actions et ne retournent aucune valeur. (voir plus bas dans contenus)
21°) Les expressions sont évaluées pour retourner une valeur comme résultat. 
22°) Les expr n'ont pas de ; en fin de ligne. Si ; à la fin de l'expr elle est transformée en instruction
23°) Une fonction qui retourne une valeur utilise ->, ex : fn cinq() -> i32 {5}
24°) la valeur de retour de la fn est égale à la valeur de l'expr finale dans le corps de la fn, le return est facultatif
25°) les blocs de code s'exécutent jusqu'à la dernière expression qu'ils contiennent
26°) if : chaque valeur qui peut être le résultat de chaque branche du if doivent être du même type (if et les else if et else doivent retourner même type)



LES TYPES de variables :

let indice: usize = indice


LES TYPES D'ENTIERS EN RUST

Taille	Signé	Non signé
8 bits	i8	u8
16 bits	i16	u16
32 bits	i32	u32
64 bits	i64	u64
128 bits	i128	u128
archi	isize	usize

si l'on peut lui attribuer un signe (signé) ou s'il sera toujours positif et que l'on peut donc le représenter sans signe (non signé)

LES TYPES D'ENTIERS EN RUST
f32
f64 (par défaut)

CARGO :

Cargo permet de compiler le code et d'aggréger des bibliothèques, il permet d'héberger des projets rust
Cargo est analogue à un environnement virtuel

############### MODULES RUST

[dependencies]
rand = "0.8.3"         // module chiffres aléatoire (équivalent random python)


############################################################

Process création projet rust : 

dans terminal :
1°) cargo new nom_projet  (va créer dossier)
2°) cd nom_projet (se déplacer dans le dossier)


Process MAJ du dossier et de l'exe en cours d'écriture avec :
1°) dans le dossier src via cd : cargo build                 : va créer l'ensemble de l'environnement 
2°) pour executer : .\target\debug\nom_projet.exe

MAJ du dossier, ET lancement direct de l'executable :
1°) cargo run

>>>>>>> recommandé <<<<<<<<
tester le code pour voir si tout va bien (équivalent RUN)
1°) cargo check

Créer la version finale de l'executable :
1°) cargo build --release

MAJ des crates du script :
1°) cargo update

------ soit :
0°) cargo new : initier
1°) cargo build : compiler
2°) cargo run : compiler + éxécuter
2°) cargo check : itérer éxecution
3°) finaliser le script : cargo build --release

************ lexique ************

crate : dépendances rust

############################################################ TECHNIQUES

A°) Créer une saisie input utilisateur, exemple ;

use std::io;                    // importer la bibliotheques input/output

fn main() {

    println!("Bonjour ! Comment tu t'appelles?");

    let mut prenom = String::new();                          // créer une variable mutable (car saisie), de type string. Le new montre que c'est un objet généré

    io::stdin()                                         // importer la fonction stdin du module io, on aurait pu écrire aussi std::io::stdin()
        .read_line(&mut prenom)                         // lire l'entrée et la lier à la variable définie précédemment
        .expect("Echec de la lecture du prénom");          // similaire au try / except permet de catcher une exception

    println!("Devine un nombre {}", prenom);              // afficher la variable saisie dans une string

###############################

B°) Créer un nombre aléatoire (importer crate rand):

let nombre_secret =  rand::thread_rng().gen_range(1..101);    //entre 1 et 100, on peut écrire en fermé aussi (1..=100)

###############################

C°) Les constantes :

sont totalement immuables, s'écrivent comme modèle suivant ;

const TROIS_HEURES_EN_SECONDES: u32 = 60 * 60 * 3;


############################################################ /TECHNIQUES
------------- TIPS ---------------------------------------

Récupérer via GIT un projet RUST :

$ git clone example.org/projet_quelconque
$ cd projet_quelconque
$ cargo build

---------------

Créer un commentaire sur une ligne via "//" : // je suis un commentaire

Autres ;
//!	Commentaire de documentation sur l'élément contenant actuel
///	Commentaire de documentation sur l'élément suivant ce commentaire
/*...*/	Bloc de commentaire
/*!...*/	Bloc de commentaire de documentation sur l'élément contenant actuel
/**...*/	Bloc de commentaire de documentation sur l'élément suivant ce commentaire


-------------- correction itérative du code - CLIPPY
0°) Installer Clippy, dans terminal : rustup component add clippy
1°) Lancer : cargo clippy   (avant un cargo run ou un cargo check)



///////////////////////////////////////////////// ATELIER RUST \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Contenu : générer nombre aléatoire, comparaison de variables (cmp), utilisation match, cast variable str en int, inpu/output, loop (boucle)

-----------------------

use std::io;
use rand::Rng;
use std::cmp::Ordering;

fn main() {

    let nombre_secret = rand::thread_rng().gen_range(1..101);

    loop {

    println!("Choisis un nombre entre 1 et 101 !");

    let mut supposition = String::new();

    io::stdin()
        .read_line(&mut supposition)
        .expect("Échec de la lecture de l'entrée utilisateur");

    // version avec except qui fait crasher : let supposition: u32 = supposition.trim().parse().expect("Veuillez entrer un nombre !");
    // version avec un catch qui permet de continuer la boucle :

    let supposition: u32 = match supposition.trim().parse() {
        Ok(nombre) => nombre,
        Err(_) => {
            println!("Un nombre je t'ai dis !");
            continue;}
    };

    println!("Votre nombre : {}", supposition);

    match supposition.cmp(&nombre_secret) {
        Ordering::Less => println!("C'est plus !"),
        Ordering::Greater => println!("C'est moins !"),
        Ordering::Equal => {
            println!("Tu as gagné !");
            break;
        }
    }
    }
}

-----------------------------------------------------------------------------------

contenu : match permet aussi d'associer des éléments comme un tableau

let language = "FR";
 
match language {
    "FR" => println!("Français"),
    "EN" => println!("Anglais"),
    "DE" => println!("Allemand"),
    "ES" => println!("Espagnol"),
    _ => println!("Langue inconnue") // Equivalent au default du switch
}


AUTRE EXEMPLE : 

let has_access = true;
 
let role = match has_access {
    true => "Admin",
    false => "User"
};

-------------------------

il y a aussi des comparaisons plus poussées ; match sur condition if, sur contenu, sur segment de liste, sur variable

let value = 5;
 
match value {
    0 => println!("Zéro"),
    1 | 2 | 3 => println!("Un, deux ou trois"),
    4..=10 => println!("Entre quatre et dix"),
    x if x > 10 => println!("Supérieur à 10"),
    _ => println!("Autres")
};
-----------------------------------------------------------------------------------

Contenu : comportement de modification d'une variable, hors et dans une portée intérieure

fn main() {
    let x = 5;

    println!("La valeur de x est : {}", x);           // value : 5

    let x = x + 1;

    println!("La valeur de x est : {}", x);        // value : 6

    {
        let x = x * 2;
        println!("La valeur de x dans la portée interne est : {}", x);           // value : 12
    }

    println!("La valeur de x est : {}", x);      // value : 6
    
}

-----------------------------------------------------------------------------------

Contenu : len d'une str

fn main() {
    let espaces = "   ";
    let espaces = espaces.len();
    println!("{}", espaces);
}

-----------------------------------------------------------------------------------

Contenu : variable flottant

fn main() {
    let x = 2.2; // f64
    println!("{}", x);
    let y: f32 = 3.1; // f32
    println!("{}", y);
}

-----------------------------------------------------------------------------------

Contenu : addition, soustraction, multiplication : toujours créer variable let 

fn main() {
    // addition
    let somme = 5 + 10;

    // soustraction
    let difference = 95.5 - 4.3;

    // multiplication
    let produit = 4 * 30;

-----------------------------------------------------------------------------------

Contenu : boolean : en minuscule

fn main() {
    let t = true;

    let f: bool = false; // avec une annotation de type explicite
}

-----------------------------------------------------------------------------------
Contenu : Tuples 

fn main() {
    let tup: (i32, f64, u8) = (500, 6.4, 1);             // déclaration des types dans le tuple puis déclaration des valeurs
}

------------------------

Pour décomposer un tuple, via destructuration ;

fn main() {
    let tup = (500, 6.4, 1);

    let (x, y, z) = tup;

    println!("La valeur de y est : {}", y);
}

------------------------

Pour décomposer un tuple, via recherche intra ;

fn main() {
    let x: (i32, f64, u8) = (500, 6.4, 1);

    let cinq_cents = x.0;

    let six_virgule_quatre = x.1;

    let un = x.2;
}

Le tuple sans aucune valeur, (), est un type spécial qui a une seule et unique valeur, qui s'écrit aussi ()
-----------------------------------------------------------------------------------

Contenu : Tableau ou Array

Contrairement aux tuples, chaque élément d'un tableau doit être du même type. 
Contrairement aux tableaux de certains autres langages, les tableaux de Rust ont une taille fixe.
les tableaux s'avèrent utiles lorsque vous savez que le nombre d'éléments n'aura pas besoin de changer.

ex : 

let mois = ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet",
            "Août", "Septembre", "Octobre", "Novembre", "Décembre"];

------------------------

Pour "cadrer" la déclaration d'un tableau :

let a: [i32; 5] = [1, 2, 3, 4, 5];                 // dans ce tableau il y aura 5 valeur d'entier signées 32

------------------------

Pour déclarer un tableau au contenu identique mais redondant :

let a = [3; 5];               // il y aura 5 éléments de valeur 3, ce code égale donc let a = [3, 3, 3, 3, 3];

------------------------

Pour explorer un tableau :        // équivalent à l'exploration de tuples en python

fn main() {
    let a = [1, 2, 3, 4, 5];

    let premier = a[0];
    let second = a[1];
}

-----------------------------------------------------------------------------------

Contenu : déclaration de fonction qui appelle une autre fonction,

Il faut toujours déclarer les types des arguments de fonction lors de création d'une fonction

fn main() {
    une_autre_fonction(5);
}

fn une_autre_fonction(x: i32) {
    println!("La valeur de x est : {}", x);
}

-----------------------------------------------------------------------------------

Contenu : Instruction / Expression de fonction, différences 

une fonction main qui contient une instruction : 

fn main() {
    let y = 6;
}

Les expressions peuvent faire partie d'une instruction : 
dans la fonction ci-dessus, le 6 dans l'instruction let y = 6; est une expression qui s'évalue à la valeur 6.

--------------------------

L'appel de fonction est aussi une expression. 
L'appel de macro est également une expression.
Un nouveau bloc de portée que nous créons avec des accolades est une expression, ex de tout cela ;

fn main() {
    let y = {
        let x = 3;
        x + 1
    };

    println!("La valeur de y est : {}", y);
}

main()

--------------------------

Définir le retour de fonction dès la création de la fonction 

fn cinq() -> i32 {
    5                                  // indiquer via -> que la fonction renvoie un entier
}

fn main() {
    let x = cinq();

    println!("La valeur de x est : {}", x);
}

-----------------------------------------------------------------------------------

Contenu : condition if sur comparaison de variable

fn main() {
    let nombre = 6;

    if nombre < 5 {
        println!("La condition est vérifiée");
    } else {
        println!("La condition n'est pas vérifiée");
    }
}

--------------------------

Contenu : exemple condition if true booléen

fn main() {
    let condition = true;

    if condition {
        println!("La condition est {}", condition);
    }
}

--------------------------

Contenu : else if

fn main() {
    let nombre = 6;

    if nombre % 4 == 0 {
        println!("Le nombre est divisible par 4");
    } else if nombre % 3 == 0 {
        println!("Le nombre est divisible par 3");
    } else if nombre % 2 == 0 {
        println!("Le nombre est divisible par 2");
    } else {
        println!("Le nombre n'est pas divisible par 4, 3 ou 2");
    }
}

--------------------------

Contenu : variable-fonction-condition-if

fn main() {

    let condition = true;
    
    let nombre = if condition { 5 } else { 6 };

    println!("La valeur du nombre est : {}", nombre);
    
}

-----------------------------------------------------------------------------------

Contenu : les boucles loop, while, for

-------------------------- loop

fn main() {
    loop {
        println!("À nouveau !");
    }
}

-------------------------- compteur simple avec loop

fn main() {
    let mut compteur = 0;

    let resultat = loop {

        compteur += 1;
        println!("état du compteur : {}", compteur);

        if compteur == 10 {
            break compteur * 2;
        }
    };

    println!("Le résultat est {}", resultat);
}


-------------------------- boucles imbriquées : compteur initial + compteur secondaire : incrémentation + loop

fn main() {
    let mut compteur = 0;
    'increment: loop {
        println!("boucle 1, compteur stock = {}", compteur);
        let mut restant = 10;

        loop {
            println!("dans la 2ème boucle, compteur restant = {}", restant);
            if restant == 5 {
                println!("sortie 2ème boucle sur compteur boucle 2");
                break; // break de la loop 
            }
            if compteur == 2 {
                println!("sortie 2ème boucle sur compteur boucle 1");
                break 'increment; // break de l'incrémentation
            }

            restant -= 1; // else final implicite
        }

        println!("fin boucle 2, compteur fin boucle 1 = {}", compteur);

        compteur += 1;

        println!("compteur fin boucle 1 incrémenté = {}", compteur);

    }
    println!("Fin du compteur 1 = {}", compteur);
}

-------------------------- boucle while avec compteur

fn main() {
    let mut nombre = 3;

    while nombre != 0 {
        println!("{} !", nombre);

        nombre -= 1;
    }

    println!("DÉCOLLAGE !!!");
}

-------------------------- boucle while itération sur indice de liste-tableau-array

fn main() {
    let a = [10, 20, 30, 40, 50];
    let mut indice = 0;

    while indice < 5 {
        println!("La valeur est : {}", a[indice]);
        indice += 1;
        println!("L'indice est {}", indice);
    }
}

-------------------------- boucle for itération sur liste

fn main() {
    let a = [10, 20, 30, 40, 50];

    for element in a {
        println!("La valeur est : {}", element);
    }
}

alternative avec pointeur :

let arr = [1, 2, 3, 4];
 
for value in &arr {
    println!("{}", value);
}

-------------------------- boucle for qui itère sur liste avec et sans pas

for value in 0..=10 {
    println!("{}", value);
}
 
// Parcours des valeurs de 0 à 10 avec un pas de 2
for value in (0..=10).step_by(2) {
    println!("{}", value);
}

-------------------------- boucle for qui itère à l'envers, (ici de 3 à 1), utilisation de REV

fn main() {
    for nombre in (1..4).rev() {
        println!("{} !", nombre);
    }
    println!("DÉCOLLAGE !!!");
}



----------------------------------------------------------------------------------- Les fonctions

MATRICE TYPE :

// Fonction avec paramètres et valeur de retour
fn sum(x: i32, y: i32) -> i32 {
    x + y

-------------------------- exemple fonction qui prend string en argument et renvoie un string


fn prend_et_rend(texte: String) -> String {
  texte
}


--------------------------



let s2 = String::from("hello");

--------------------------

contenu : créer variable string, l'appeler via son pointeur(&), et len() pour calculer longueur string

fn main() {
    let s1 = String::from("Kirikou");

    let long = calculer_taille(&s1);

    println!("La taille de '{}' est {}.", s1, long);
}

fn calculer_taille(s: &String) -> usize {               // on lie le s à un  (&) sur la famille string, pour permettre l'acceptation de s1 dans variable "let long"
    s.len()
}

----------------------------------------------------------------------------------- Les structures

exemple de structure avec différents types d'attributs, et construction d'une instance de la structure :

struct Utilisateur {
    actif: bool,
    pseudo: String,                       // séparation des attributs via , 
    email: String,
    nombre_de_connexions: u64,
}


fn main() {
    let utilisateur1 = Utilisateur {                            // création d'une instance de la structura via let
        email: String::from("quelquun@example.com"),
        pseudo: String::from("pseudoquelconque123"),            // bien penser à from pour récupérer la string de la variable
        actif: true,
        nombre_de_connexions: 1,
    };

    utilisateur1.email = String::from("unautremail@example.com");      // écraser le contenu d'une variable d'une instance 
}

--------------------------

contenu : créer une fonction externe à l'instance pour créer une instance via des inputs (ici email et pseudo en input), le reste saisi dans le corps de fonction
renvoi un objet de la structure Utilisateur

fn creer_utilisateur(email: String, pseudo: String) -> Utilisateur {
    Utilisateur {
        email: email,
        pseudo: pseudo,
        actif: true,
        nombre_de_connexions: 1,
    }
}


FACTORISATION de l'exemple ci-dessus ;           // pas besoin de répéter les attributs de l'instance ;

fn creer_utilisateur(email: String, pseudo: String) -> Utilisateur {
    Utilisateur {
        email,
        pseudo,
        actif: true,
        nombre_de_connexions: 1,
    }
}

-------------------------- 

contenu : créer une instance de structure qui reprend les valeurs d'une autre instance déjà créée

fn main() {
    // -- partie masquée ici --

    let utilisateur1 = Utilisateur {
        email: String::from("quelquun@example.com"),
        pseudo: String::from("pseudoquelconque123"),
        actif: true,
        nombre_de_connexions: 1,
    };

    let utilisateur2 = Utilisateur {
        actif: utilisateur1.actif,
        pseudo: utilisateur1.email,
        email: String::from("quelquundautre@example.com"),
        nombre_de_connexions: utilisateur1.nombre_de_connexions,
    };
}

FACTORISATION de l'exemple ci-dessus ;           // pas besoin de répéter les attributs non modifiés de l'instance ;

fn main() {
    // -- partie masquée ici --

    let utilisateur1 = Utilisateur {
        email: String::from("quelquun@example.com"),
        pseudo: String::from("pseudoquelconque123"),
        actif: true,
        nombre_de_connexions: 1,
    };

    let utilisateur2 = Utilisateur {
        email: String::from("quelquundautre@example.com"),
        ..utilisateur1
    };
}

-------------------------- Les structures de tuple

Se construit comme struct mais intègre des types d'attributs non nommés, c'est un type de tuple unique,  est exploré comme un tuple normal via nom_tuple.0

struct Couleur(i32, i32, i32);
struct Point(i32, i32, i32);

fn main() {
    let noir = Couleur(0, 0, 0);
    let origine = Point(0, 0, 0);
}

-------------------------- 

contenu : les structures sans champ dit structure unité, permet de les surcharger avec des traits en s'affranchissant des types

struct ToujoursEgal;

fn main() {
    let sujet = ToujoursEgal;
}

--------------------------

contenu : implémenter une méthode dans une structure :

struct Rectangle {
    width: u32,
    height: u32,
}
 
impl Rectangle {
    // Méthode statique : ici new sera utilisé comme constructeur
    fn new(width: u32, height: u32) -> Rectangle {
        Rectangle {
            width: width,
            height: height,
        }
    }
 
    // Méthode non statique : Le paramètre self fait référence à l'instance courante
    fn print(&self) {
        println!("width: {}, height: {}", self.width, self.height);
    }
}

let rect = Rectangle::new(10, 20);
 
rect.print();


--------------------------

----------------------------------------------------------------------------------- Les traits

Les traits permettent de définir des comportements à partager
mais également des comportements à implémenter 

ex : un trait Shape avec une méthode area qui devra être implémentée par les structures utilisant ce trait 

trait Shape {
    fn area(&self) -> u32;
}

impl Shape for Rectangle {
    fn area(&self) -> u32 {
        self.width * self.height
    }
}

let rect = Rectangle::new(10, 20);           
 
println!("Area : {}", rect.area());           // appeler la méthode area sur la structure rectangle


############################################################################

mots clés : 
.parse()          transforme les str chiffres en entier ou floats (il faut une str compatible type "42")
.trim()           permet d'enlever les espaces
.rev()            reverse, pour itérer à l'envers
loop{}            boucle infinie
match {}          comparaison d'objets
.cmp()            comparaison de valeur (entiers par ex)
.expect()         attraper les exceptions
let               créer variable
.clone()		copie profonde de la variable copiée


############################################################################
Chapitres à refaire : 4.2 + 4.3




########################################################################################################
############################# SMART CONTRACTS DAO TOKENS ############################################### 

CREER SMART CONTRACT SOLANA QUI INTEGRE ORACLE CHAINLINK :

https://blog.chain.link/how-to-build-and-deploy-a-solana-smart-contract/


############################################################################ CREER DAO ET CREER TOKEN

CREER TOKEN SUR SOLANA : https://www.youtube.com/watch?v=5TkAd13Pp1M

étapes : 
1°) créer le token et minter ses tokens sur dexlab
2°) aller sur le github solana pour MAJ la liste officielle des tokens dans src, met 1h
3°) créer un market id sur dexlab pour créer le contrat de liquidités d'une paire (tokenX/USDC par ex), met 48h
4°) créer une pool de liquidité et la connecter au contrat sur raydium (coute bcp SOL)
5°) ajouter de la liquidity sur raydium (aller dans options de recherche du token via activation option 'solana list' il faut injecter 10k USD minimum


CREER TOKEN SUR BINANCE SMART CHAIN : https://www.youtube.com/watch?v=ASBscBoUx1w
1°) aller sur remix, récupérer une trame de smart contract et la personnaliser pour déployer le contrat
	trame smart contract : https://github.com/jklepatch/eattheblocks/blob/master/screencast/308-create-bep20-token-bsc/Token.sol
2°) tranférer les tokens à l'addresse de la tréso DAO via remix (dans deployed contracts)
3°) aller sur pancakeswap pour ajouter de la liquidité au contrat visé (injecter les tokens reçus + un collateral)

CREER TOKEN ERC20 : https://www.youtube.com/watch?v=ZLFiGHIxS1c
	voir bibliotheque github OpenZeppelin dans openzeppelin-contracts pour matrices et fonctions smart contract


############################################################################ CHAIN LINK

Modules API chain link : https://chain.link/           meteo, sport, fees price, reserves de fonds, random generation, ..

